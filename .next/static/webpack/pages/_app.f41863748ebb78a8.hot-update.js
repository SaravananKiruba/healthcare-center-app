"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./src/services/api-nextjs.js":
/*!************************************!*\
  !*** ./src/services/api-nextjs.js ***!
  \************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   apiUtils: function() { return /* binding */ apiUtils; },\n/* harmony export */   authAPI: function() { return /* binding */ authAPI; },\n/* harmony export */   healthAPI: function() { return /* binding */ healthAPI; },\n/* harmony export */   investigationsAPI: function() { return /* binding */ investigationsAPI; },\n/* harmony export */   patientsAPI: function() { return /* binding */ patientsAPI; }\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var _utils_dataTransform__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/dataTransform */ \"./src/utils/dataTransform.js\");\n/* harmony import */ var _utils_debugLog__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/debugLog */ \"./src/utils/debugLog.js\");\n/**\r\n * Next.js API Service Module\r\n * \r\n * Enhanced API service with robust error handling, retry logic, and proper data transformation\r\n */ \n\n\nconst BASE_URL =  false ? 0 : \"http://localhost:3000\";\n// Create axios instance with enhanced configuration\nconst api = axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"].create({\n    baseURL: \"\".concat(BASE_URL, \"/api\"),\n    timeout: 30000,\n    headers: {\n        \"Content-Type\": \"application/json\"\n    },\n    // Retry configuration\n    retry: 3,\n    retryDelay: 1000\n});\n// Enhanced error handler\nconst handleApiError = (error)=>{\n    if (error.response) {\n        // Server responded with error status\n        const { status, data } = error.response;\n        switch(status){\n            case 400:\n                throw new Error(data.message || \"Invalid request data\");\n            case 401:\n                throw new Error(\"Authentication required. Please log in again.\");\n            case 403:\n                throw new Error(\"You do not have permission to perform this action\");\n            case 404:\n                throw new Error(\"The requested resource was not found\");\n            case 409:\n                throw new Error(data.message || \"Resource conflict\");\n            case 422:\n                throw new Error(data.message || \"Validation error\");\n            case 500:\n                throw new Error(\"Internal server error. Please try again later.\");\n            default:\n                throw new Error(data.message || \"Request failed with status \".concat(status));\n        }\n    } else if (error.request) {\n        // Network error\n        throw new Error(\"Network error. Please check your connection and try again.\");\n    } else {\n        // Request setup error\n        throw new Error(error.message || \"An unexpected error occurred\");\n    }\n};\n// Retry logic for failed requests\nconst retryRequest = async (config)=>{\n    const { retry, retryDelay } = config;\n    for(let i = 0; i < retry; i++){\n        try {\n            return await (0,axios__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(config);\n        } catch (error) {\n            if (i === retry - 1) throw error;\n            // Don't retry client errors (4xx)\n            if (error.response && error.response.status >= 400 && error.response.status < 500) {\n                throw error;\n            }\n            // Wait before retry\n            await new Promise((resolve)=>setTimeout(resolve, retryDelay * (i + 1)));\n        }\n    }\n};\n// Enhanced request interceptor\napi.interceptors.request.use((config)=>{\n    try {\n        // Transform request data from camelCase to snake_case\n        if (config.data && typeof config.data === \"object\") {\n            // Handle nested JSON objects that might be strings\n            const processedData = {\n                ...config.data\n            };\n            // Ensure these fields are properly serialized for the API\n            [\n                \"medicalHistory\",\n                \"physicalGenerals\",\n                \"menstrualHistory\",\n                \"foodAndHabit\"\n            ].forEach((field)=>{\n                if (processedData[field] && typeof processedData[field] === \"string\") {\n                    try {\n                        processedData[field] = JSON.parse(processedData[field]);\n                    } catch (e) {\n                        // If it's already a valid JSON object, this will fail, which is fine\n                        console.log(\"Field \".concat(field, \" is already parsed or not valid JSON\"));\n                    }\n                }\n            });\n            config.data = (0,_utils_dataTransform__WEBPACK_IMPORTED_MODULE_0__.camelToSnakeCase)(processedData);\n        }\n        // Transform URL parameters from camelCase to snake_case\n        if (config.params && typeof config.params === \"object\") {\n            config.params = (0,_utils_dataTransform__WEBPACK_IMPORTED_MODULE_0__.camelToSnakeCase)(config.params);\n        }\n        return config;\n    } catch (error) {\n        console.error(\"Error in request interceptor:\", error);\n        return config; // Return the original config if transformation fails\n    }\n}, (error)=>{\n    return Promise.reject(error);\n});\n// Enhanced response interceptor\napi.interceptors.response.use((response)=>{\n    // Transform response data from snake_case to camelCase\n    if (response.data) {\n        response.data = (0,_utils_dataTransform__WEBPACK_IMPORTED_MODULE_0__.snakeToCamelCase)(response.data);\n    }\n    return response;\n}, async (error)=>{\n    const config = error.config;\n    // Transform error response data from snake_case to camelCase\n    if (error.response && error.response.data) {\n        error.response.data = (0,_utils_dataTransform__WEBPACK_IMPORTED_MODULE_0__.snakeToCamelCase)(error.response.data);\n    }\n    // Retry logic for network errors and 5xx errors\n    if (config && config.retry && (!error.response || error.response.status >= 500 && error.response.status < 600)) {\n        config.retry--;\n        await new Promise((resolve)=>setTimeout(resolve, config.retryDelay));\n        return api(config);\n    }\n    // Handle API errors\n    handleApiError(error);\n});\n// Enhanced Patients API with validation and error handling\nconst patientsAPI = {\n    getAllPatients: async function() {\n        let params = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        try {\n            const response = await api.get(\"/patients\", {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch patients:\", error);\n            throw error;\n        }\n    },\n    getPatient: async (id)=>{\n        if (!id) throw new Error(\"Patient ID is required\");\n        try {\n            const response = await api.get(\"/patients/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch patient \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    createPatient: async (data)=>{\n        if (!data || typeof data !== \"object\") {\n            throw new Error(\"Valid patient data is required\");\n        }\n        // Log the input data for debugging\n        (0,_utils_debugLog__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Creating Patient - Input Data\", data, \"info\");\n        // Validate required fields before sending to API\n        if (!data.name) throw new Error(\"Patient name is required\");\n        if (!data.address) throw new Error(\"Address is required\");\n        if (!data.age) throw new Error(\"Age is required\");\n        if (!data.sex) throw new Error(\"Sex is required\");\n        if (!data.mobileNumber) throw new Error(\"Mobile number is required\");\n        if (!data.chiefComplaints) throw new Error(\"Chief complaints are required\");\n        try {\n            // Create default objects for JSON fields\n            const defaultMedicalHistory = {\n                pastHistory: {\n                    allergy: false,\n                    anemia: false,\n                    arthritis: false,\n                    asthma: false,\n                    cancer: false,\n                    diabetes: false,\n                    heartDisease: false,\n                    hypertension: false,\n                    thyroid: false,\n                    tuberculosis: false\n                },\n                familyHistory: {\n                    diabetes: false,\n                    hypertension: false,\n                    thyroid: false,\n                    tuberculosis: false,\n                    cancer: false\n                }\n            };\n            const defaultPhysicalGenerals = {\n                appetite: \"\",\n                bowel: \"\",\n                urine: \"\",\n                sweating: \"\",\n                sleep: \"\",\n                thirst: \"\",\n                addictions: \"\"\n            };\n            const defaultFoodAndHabit = {\n                foodHabit: \"\",\n                addictions: \"\"\n            };\n            const defaultMenstrualHistory = data.sex === \"Female\" ? {\n                menses: \"\",\n                menopause: \"No\",\n                leucorrhoea: \"\",\n                gonorrhea: \"No\",\n                otherDischarges: \"\"\n            } : null;\n            // Ensure JSON fields are properly structured and have default values\n            const sanitizedData = {\n                ...data,\n                medicalHistory: data.medicalHistory || defaultMedicalHistory,\n                physicalGenerals: data.physicalGenerals || defaultPhysicalGenerals,\n                foodAndHabit: data.foodAndHabit || defaultFoodAndHabit,\n                // Only include menstrualHistory for female patients\n                menstrualHistory: data.sex === \"Female\" ? data.menstrualHistory || defaultMenstrualHistory : null\n            };\n            // Log the sanitized data for debugging\n            (0,_utils_debugLog__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Creating Patient - Sanitized Data\", sanitizedData, \"info\");\n            const response = await api.post(\"/patients\", sanitizedData);\n            // Log the success response\n            (0,_utils_debugLog__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Patient Created Successfully\", response.data, \"info\");\n            return response.data;\n        } catch (error) {\n            var _error_response_data, _error_response, _error_response_data1, _error_response1, _error_response2, _error_response3, _error_config;\n            // Log the error with detailed information\n            (0,_utils_debugLog__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"Failed to create patient\", error, \"error\");\n            const errorMessage = ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || error.message || \"Failed to create patient\";\n            const errorDetails = ((_error_response1 = error.response) === null || _error_response1 === void 0 ? void 0 : (_error_response_data1 = _error_response1.data) === null || _error_response_data1 === void 0 ? void 0 : _error_response_data1.details) || \"\";\n            (0,_utils_debugLog__WEBPACK_IMPORTED_MODULE_1__[\"default\"])(\"API Error Details\", {\n                status: (_error_response2 = error.response) === null || _error_response2 === void 0 ? void 0 : _error_response2.status,\n                data: (_error_response3 = error.response) === null || _error_response3 === void 0 ? void 0 : _error_response3.data,\n                message: errorMessage,\n                details: errorDetails,\n                request: ((_error_config = error.config) === null || _error_config === void 0 ? void 0 : _error_config.data) ? JSON.parse(error.config.data) : null\n            }, \"error\");\n            throw new Error(\"\".concat(errorMessage).concat(errorDetails ? \": \" + errorDetails : \"\"));\n        }\n    },\n    updatePatient: async (id, data)=>{\n        if (!id) throw new Error(\"Patient ID is required\");\n        if (!data || typeof data !== \"object\") {\n            throw new Error(\"Valid patient data is required\");\n        }\n        try {\n            const response = await api.put(\"/patients/\".concat(id), data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to update patient \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    deletePatient: async (id)=>{\n        if (!id) throw new Error(\"Patient ID is required\");\n        try {\n            const response = await api.delete(\"/patients/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to delete patient \".concat(id, \":\"), error);\n            throw error;\n        }\n    }\n};\n// Enhanced Investigations API\nconst investigationsAPI = {\n    getAllInvestigations: async function() {\n        let patientId = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : null;\n        try {\n            const params = patientId ? {\n                patientId\n            } : {};\n            const response = await api.get(\"/investigations\", {\n                params\n            });\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch investigations:\", error);\n            throw error;\n        }\n    },\n    getInvestigation: async (id)=>{\n        if (!id) throw new Error(\"Investigation ID is required\");\n        try {\n            const response = await api.get(\"/investigations/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch investigation \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    createInvestigation: async (data)=>{\n        if (!data || typeof data !== \"object\") {\n            throw new Error(\"Valid investigation data is required\");\n        }\n        try {\n            const response = await api.post(\"/investigations\", data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to create investigation:\", error);\n            throw error;\n        }\n    },\n    updateInvestigation: async (id, data)=>{\n        if (!id) throw new Error(\"Investigation ID is required\");\n        if (!data || typeof data !== \"object\") {\n            throw new Error(\"Valid investigation data is required\");\n        }\n        try {\n            const response = await api.put(\"/investigations/\".concat(id), data);\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to update investigation \".concat(id, \":\"), error);\n            throw error;\n        }\n    },\n    deleteInvestigation: async (id)=>{\n        if (!id) throw new Error(\"Investigation ID is required\");\n        try {\n            const response = await api.delete(\"/investigations/\".concat(id));\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to delete investigation \".concat(id, \":\"), error);\n            throw error;\n        }\n    }\n};\n// Enhanced Auth/Users API\nconst authAPI = {\n    getCurrentUser: async ()=>{\n        try {\n            const response = await api.get(\"/users/me\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch current user:\", error);\n            throw error;\n        }\n    },\n    getUsers: async ()=>{\n        try {\n            const response = await api.get(\"/users\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Failed to fetch users:\", error);\n            throw error;\n        }\n    },\n    // These are handled by NextAuth, but keeping for compatibility\n    login: async (email, password)=>{\n        throw new Error(\"Use NextAuth signIn instead of this method\");\n    },\n    logout: async ()=>{\n        throw new Error(\"Use NextAuth signOut instead of this method\");\n    }\n};\n// Enhanced Health check API\nconst healthAPI = {\n    check: async ()=>{\n        try {\n            const response = await api.get(\"/health\");\n            return response.data;\n        } catch (error) {\n            console.error(\"Health check failed:\", error);\n            throw error;\n        }\n    }\n};\n// Utility functions for common operations\nconst apiUtils = {\n    // Check if API is available\n    isApiHealthy: async ()=>{\n        try {\n            await healthAPI.check();\n            return true;\n        } catch (e) {\n            return false;\n        }\n    },\n    // Test database connection\n    testConnection: async ()=>{\n        try {\n            const health = await healthAPI.check();\n            return health.database === \"connected\";\n        } catch (e) {\n            return false;\n        }\n    },\n    // Get API base URL\n    getBaseUrl: ()=>\"\".concat(BASE_URL, \"/api\")\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = (api);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/services/api-nextjs.js\n"));

/***/ })

});