"use strict";(()=>{var e={};e.id=459,e.ids=[459],e.modules={3524:e=>{e.exports=require("@prisma/client")},8432:e=>{e.exports=require("bcryptjs")},2113:e=>{e.exports=require("next-auth/next")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,i)=>{Object.defineProperty(i,"l",{enumerable:!0,get:function(){return function e(i,t){return t in i?i[t]:"then"in i&&"function"==typeof i.then?i.then(i=>e(i,t)):"function"==typeof i&&"default"===t?i:void 0}}})},2303:(e,i,t)=>{t.r(i),t.d(i,{config:()=>f,default:()=>m,routeModule:()=>p});var r={};t.r(r),t.d(r,{default:()=>u});var n=t(1802),a=t(7153),s=t(6249),l=t(3524),o=t(2113),d=t(7309);let c=new l.PrismaClient;async function u(e,i){let t=await (0,o.getServerSession)(e,i,d.authOptions);if(!t)return i.status(401).json({error:"Unauthorized"});try{switch(e.method){case"GET":let r;let{patientId:n}=e.query;return n?(console.log("Fetching investigations for patient ID:",n),r=await c.investigation.findMany({where:{patientId:n,patient:{userId:t.user.id}},include:{patient:{select:{id:!0,name:!0}}},orderBy:{date:"desc"}})):r=await c.investigation.findMany({where:{patient:{userId:t.user.id}},include:{patient:{select:{id:!0,name:!0}}},orderBy:{date:"desc"}}),i.status(200).json(r);case"POST":let{patientId:a,type:s,details:l,date:o,fileUrl:d,doctor:u,results:m,normalRange:f,followUpNeeded:p,followUpDate:g,notes:h}=e.body;if(console.log("Investigation POST request received:",JSON.stringify(e.body,null,2)),!a)return i.status(400).json({error:"Missing required field",message:"Patient ID is required",details:"The patientId field is missing or invalid"});if(!l)return i.status(400).json({error:"Missing required field",message:"Investigation details are required",details:"The details field is missing or invalid"});if(!o)return i.status(400).json({error:"Missing required field",message:"Date is required",details:"The date field is missing or invalid"});try{let e;if(!(e=await c.patient.findFirst({where:{id:a,userId:t.user.id}})))return i.status(404).json({error:"Patient not found",details:`Patient with ID ${a} not found`});console.log("Creating investigation for patient:",e.name);let r=new Date(o),n=g?new Date(g):null;isNaN(r.getTime())&&(console.error("Invalid date format:",o),r=new Date),g&&isNaN(n.getTime())&&(console.error("Invalid followUpDate format:",g),n=null);let v=await c.investigation.create({data:{type:s||"General",details:l,date:r,fileUrl:d||null,doctor:u||null,results:m||null,normalRange:f||null,followUpNeeded:p||!1,followUpDate:n,notes:h||null,patientId:a},include:{patient:{select:{id:!0,name:!0}}}});return console.log("Investigation created successfully:",v.id),i.status(201).json(v)}catch(e){return console.error("Error creating investigation:",e),i.status(500).json({error:"Failed to create investigation",message:e.message,details:JSON.stringify(e)})}default:return i.setHeader("Allow",["GET","POST"]),i.status(405).json({error:`Method ${e.method} not allowed`})}}catch(e){return console.error("Database error:",e),i.status(500).json({error:"Internal server error",details:"Database operation failed"})}finally{await c.$disconnect()}}let m=(0,s.l)(r,"default"),f=(0,s.l)(r,"config"),p=new n.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/investigations",pathname:"/api/investigations",bundlePath:"",filename:""},userland:r})},7309:(e,i,t)=>{t.r(i),t.d(i,{authOptions:()=>c,default:()=>u});let r=require("next-auth");var n=t.n(r);let a=require("next-auth/providers/credentials");var s=t.n(a),l=t(8432),o=t.n(l);let d=new(t(3524)).PrismaClient,c={providers:[s()({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)throw Error("Invalid credentials");let i=await d.user.findUnique({where:{email:e.email},include:{clinic:!0,branch:!0}});if(!i||!i.isActive||!await o().compare(e.password,i.hashedPassword))throw Error("Invalid credentials");return{id:i.id,email:i.email,name:i.fullName,role:i.role,clinicId:i.clinicId,branchId:i.branchId,clinicName:i.clinic?.name,branchName:i.branch?.name}}})],session:{strategy:"jwt"},callbacks:{jwt:async({token:e,user:i})=>(i&&(e.role=i.role,e.id=i.id,e.clinicId=i.clinicId,e.branchId=i.branchId,e.clinicName=i.clinicName,e.branchName=i.branchName),e),session:async({session:e,token:i})=>(i&&(e.user.id=i.id,e.user.role=i.role,e.user.clinicId=i.clinicId,e.user.branchId=i.branchId,e.user.clinicName=i.clinicName,e.user.branchName=i.branchName),e)},pages:{signIn:"/login"},secret:process.env.NEXTAUTH_SECRET},u=n()(c)},7153:(e,i)=>{var t;Object.defineProperty(i,"x",{enumerable:!0,get:function(){return t}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(t||(t={}))},1802:(e,i,t)=>{e.exports=t(145)}};var i=require("../../webpack-api-runtime.js");i.C(e);var t=i(i.s=2303);module.exports=t})();