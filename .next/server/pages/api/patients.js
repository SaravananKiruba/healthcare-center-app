"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/patients";
exports.ids = ["pages/api/patients"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\patients\\index.js */ \"(api)/./pages/api/patients/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/patients\",\n        pathname: \"/api/patients\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnBhdGllbnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNwYXRpZW50cyU1Q2luZGV4LmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzZEO0FBQzdEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx5REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMseURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2FyZS1jZW50ZXItbmV4dGpzLz9jYmY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxccGF0aWVudHNcXFxcaW5kZXguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wYXRpZW50c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BhdGllbnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].js":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_3__.PrismaClient();\nconst authOptions = {\n    providers: [\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                // Include clinic and branch information in the user query\n                const user = await prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    },\n                    include: {\n                        clinic: true,\n                        branch: true\n                    }\n                });\n                if (!user || !user.isActive) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().compare(credentials.password, user.hashedPassword);\n                if (!isPasswordValid) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                // Return additional tenant information\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.fullName,\n                    role: user.role,\n                    clinicId: user.clinicId,\n                    branchId: user.branchId,\n                    // Include clinic and branch basic info if available\n                    clinicName: user.clinic?.name,\n                    branchName: user.branch?.name\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                // Include tenant information in the JWT\n                token.role = user.role;\n                token.id = user.id;\n                token.clinicId = user.clinicId;\n                token.branchId = user.branchId;\n                token.clinicName = user.clinicName;\n                token.branchName = user.branchName;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                // Include tenant information in the session\n                session.user.id = token.id;\n                session.user.role = token.role;\n                session.user.clinicId = token.clinicId;\n                session.user.branchId = token.branchId;\n                session.user.clinicName = token.clinicName;\n                session.user.branchName = token.branchName;\n            }\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/login\"\n    },\n    secret: process.env.NEXTAUTH_SECRET\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()(authOptions));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBaUM7QUFDaUM7QUFDcEM7QUFDZ0I7QUFFOUMsTUFBTUksU0FBUyxJQUFJRCx3REFBWUE7QUFFeEIsTUFBTUUsY0FBYztJQUN6QkMsV0FBVztRQUNUTCxzRUFBbUJBLENBQUM7WUFDbEJNLE1BQU07WUFDTkMsYUFBYTtnQkFDWEMsT0FBTztvQkFBRUMsT0FBTztvQkFBU0MsTUFBTTtnQkFBUTtnQkFDdkNDLFVBQVU7b0JBQUVGLE9BQU87b0JBQVlDLE1BQU07Z0JBQVc7WUFDbEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsTUFBTSxJQUFJRSxNQUFNO2dCQUNsQjtnQkFFQSwwREFBMEQ7Z0JBQzFELE1BQU1DLE9BQU8sTUFBTVgsT0FBT1csSUFBSSxDQUFDQyxVQUFVLENBQUM7b0JBQ3hDQyxPQUFPO3dCQUNMUixPQUFPRCxZQUFZQyxLQUFLO29CQUMxQjtvQkFDQVMsU0FBUzt3QkFDUEMsUUFBUTt3QkFDUkMsUUFBUTtvQkFDVjtnQkFDRjtnQkFFQSxJQUFJLENBQUNMLFFBQVEsQ0FBQ0EsS0FBS00sUUFBUSxFQUFFO29CQUMzQixNQUFNLElBQUlQLE1BQU07Z0JBQ2xCO2dCQUVBLE1BQU1RLGtCQUFrQixNQUFNcEIsdURBQWMsQ0FDMUNNLFlBQVlJLFFBQVEsRUFDcEJHLEtBQUtTLGNBQWM7Z0JBR3JCLElBQUksQ0FBQ0YsaUJBQWlCO29CQUNwQixNQUFNLElBQUlSLE1BQU07Z0JBQ2xCO2dCQUVBLHVDQUF1QztnQkFDdkMsT0FBTztvQkFDTFcsSUFBSVYsS0FBS1UsRUFBRTtvQkFDWGhCLE9BQU9NLEtBQUtOLEtBQUs7b0JBQ2pCRixNQUFNUSxLQUFLVyxRQUFRO29CQUNuQkMsTUFBTVosS0FBS1ksSUFBSTtvQkFDZkMsVUFBVWIsS0FBS2EsUUFBUTtvQkFDdkJDLFVBQVVkLEtBQUtjLFFBQVE7b0JBQ3ZCLG9EQUFvRDtvQkFDcERDLFlBQVlmLEtBQUtJLE1BQU0sRUFBRVo7b0JBQ3pCd0IsWUFBWWhCLEtBQUtLLE1BQU0sRUFBRWI7Z0JBQzNCO1lBQ0Y7UUFDRjtLQUNEO0lBQ0R5QixTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVyQixJQUFJLEVBQUU7WUFDdkIsSUFBSUEsTUFBTTtnQkFDUix3Q0FBd0M7Z0JBQ3hDcUIsTUFBTVQsSUFBSSxHQUFHWixLQUFLWSxJQUFJO2dCQUN0QlMsTUFBTVgsRUFBRSxHQUFHVixLQUFLVSxFQUFFO2dCQUNsQlcsTUFBTVIsUUFBUSxHQUFHYixLQUFLYSxRQUFRO2dCQUM5QlEsTUFBTVAsUUFBUSxHQUFHZCxLQUFLYyxRQUFRO2dCQUM5Qk8sTUFBTU4sVUFBVSxHQUFHZixLQUFLZSxVQUFVO2dCQUNsQ00sTUFBTUwsVUFBVSxHQUFHaEIsS0FBS2dCLFVBQVU7WUFDcEM7WUFDQSxPQUFPSztRQUNUO1FBQ0EsTUFBTUosU0FBUSxFQUFFQSxPQUFPLEVBQUVJLEtBQUssRUFBRTtZQUM5QixJQUFJQSxPQUFPO2dCQUNULDRDQUE0QztnQkFDNUNKLFFBQVFqQixJQUFJLENBQUNVLEVBQUUsR0FBR1csTUFBTVgsRUFBRTtnQkFDMUJPLFFBQVFqQixJQUFJLENBQUNZLElBQUksR0FBR1MsTUFBTVQsSUFBSTtnQkFDOUJLLFFBQVFqQixJQUFJLENBQUNhLFFBQVEsR0FBR1EsTUFBTVIsUUFBUTtnQkFDdENJLFFBQVFqQixJQUFJLENBQUNjLFFBQVEsR0FBR08sTUFBTVAsUUFBUTtnQkFDdENHLFFBQVFqQixJQUFJLENBQUNlLFVBQVUsR0FBR00sTUFBTU4sVUFBVTtnQkFDMUNFLFFBQVFqQixJQUFJLENBQUNnQixVQUFVLEdBQUdLLE1BQU1MLFVBQVU7WUFDNUM7WUFDQSxPQUFPQztRQUNUO0lBQ0Y7SUFDQUssT0FBTztRQUNMQyxRQUFRO0lBQ1Y7SUFDQUMsUUFBUUMsUUFBUUMsR0FBRyxDQUFDQyxlQUFlO0FBQ3JDLEVBQUU7QUFFRixpRUFBZTFDLGdEQUFRQSxDQUFDSyxZQUFZQSxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2FyZS1jZW50ZXItbmV4dGpzLy4vcGFnZXMvYXBpL2F1dGgvWy4uLm5leHRhdXRoXS5qcz81MjdmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOZXh0QXV0aCBmcm9tICduZXh0LWF1dGgnO1xyXG5pbXBvcnQgQ3JlZGVudGlhbHNQcm92aWRlciBmcm9tICduZXh0LWF1dGgvcHJvdmlkZXJzL2NyZWRlbnRpYWxzJztcclxuaW1wb3J0IGJjcnlwdCBmcm9tICdiY3J5cHRqcyc7XHJcbmltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50JztcclxuXHJcbmNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKTtcclxuXHJcbmV4cG9ydCBjb25zdCBhdXRoT3B0aW9ucyA9IHtcclxuICBwcm92aWRlcnM6IFtcclxuICAgIENyZWRlbnRpYWxzUHJvdmlkZXIoe1xyXG4gICAgICBuYW1lOiAnY3JlZGVudGlhbHMnLFxyXG4gICAgICBjcmVkZW50aWFsczoge1xyXG4gICAgICAgIGVtYWlsOiB7IGxhYmVsOiAnRW1haWwnLCB0eXBlOiAnZW1haWwnIH0sXHJcbiAgICAgICAgcGFzc3dvcmQ6IHsgbGFiZWw6ICdQYXNzd29yZCcsIHR5cGU6ICdwYXNzd29yZCcgfVxyXG4gICAgICB9LFxyXG4gICAgICBhc3luYyBhdXRob3JpemUoY3JlZGVudGlhbHMpIHtcclxuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzPy5lbWFpbCB8fCAhY3JlZGVudGlhbHM/LnBhc3N3b3JkKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEluY2x1ZGUgY2xpbmljIGFuZCBicmFuY2ggaW5mb3JtYXRpb24gaW4gdGhlIHVzZXIgcXVlcnlcclxuICAgICAgICBjb25zdCB1c2VyID0gYXdhaXQgcHJpc21hLnVzZXIuZmluZFVuaXF1ZSh7XHJcbiAgICAgICAgICB3aGVyZToge1xyXG4gICAgICAgICAgICBlbWFpbDogY3JlZGVudGlhbHMuZW1haWxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBpbmNsdWRlOiB7XHJcbiAgICAgICAgICAgIGNsaW5pYzogdHJ1ZSxcclxuICAgICAgICAgICAgYnJhbmNoOiB0cnVlXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghdXNlciB8fCAhdXNlci5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNyZWRlbnRpYWxzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShcclxuICAgICAgICAgIGNyZWRlbnRpYWxzLnBhc3N3b3JkLFxyXG4gICAgICAgICAgdXNlci5oYXNoZWRQYXNzd29yZFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIFJldHVybiBhZGRpdGlvbmFsIHRlbmFudCBpbmZvcm1hdGlvblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBpZDogdXNlci5pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgbmFtZTogdXNlci5mdWxsTmFtZSxcclxuICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcclxuICAgICAgICAgIGNsaW5pY0lkOiB1c2VyLmNsaW5pY0lkLFxyXG4gICAgICAgICAgYnJhbmNoSWQ6IHVzZXIuYnJhbmNoSWQsXHJcbiAgICAgICAgICAvLyBJbmNsdWRlIGNsaW5pYyBhbmQgYnJhbmNoIGJhc2ljIGluZm8gaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgICBjbGluaWNOYW1lOiB1c2VyLmNsaW5pYz8ubmFtZSxcclxuICAgICAgICAgIGJyYW5jaE5hbWU6IHVzZXIuYnJhbmNoPy5uYW1lXHJcbiAgICAgICAgfTtcclxuICAgICAgfVxyXG4gICAgfSlcclxuICBdLFxyXG4gIHNlc3Npb246IHtcclxuICAgIHN0cmF0ZWd5OiAnand0JyxcclxuICB9LFxyXG4gIGNhbGxiYWNrczoge1xyXG4gICAgYXN5bmMgand0KHsgdG9rZW4sIHVzZXIgfSkge1xyXG4gICAgICBpZiAodXNlcikge1xyXG4gICAgICAgIC8vIEluY2x1ZGUgdGVuYW50IGluZm9ybWF0aW9uIGluIHRoZSBKV1RcclxuICAgICAgICB0b2tlbi5yb2xlID0gdXNlci5yb2xlO1xyXG4gICAgICAgIHRva2VuLmlkID0gdXNlci5pZDtcclxuICAgICAgICB0b2tlbi5jbGluaWNJZCA9IHVzZXIuY2xpbmljSWQ7XHJcbiAgICAgICAgdG9rZW4uYnJhbmNoSWQgPSB1c2VyLmJyYW5jaElkO1xyXG4gICAgICAgIHRva2VuLmNsaW5pY05hbWUgPSB1c2VyLmNsaW5pY05hbWU7XHJcbiAgICAgICAgdG9rZW4uYnJhbmNoTmFtZSA9IHVzZXIuYnJhbmNoTmFtZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdG9rZW47XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgc2Vzc2lvbih7IHNlc3Npb24sIHRva2VuIH0pIHtcclxuICAgICAgaWYgKHRva2VuKSB7XHJcbiAgICAgICAgLy8gSW5jbHVkZSB0ZW5hbnQgaW5mb3JtYXRpb24gaW4gdGhlIHNlc3Npb25cclxuICAgICAgICBzZXNzaW9uLnVzZXIuaWQgPSB0b2tlbi5pZDtcclxuICAgICAgICBzZXNzaW9uLnVzZXIucm9sZSA9IHRva2VuLnJvbGU7XHJcbiAgICAgICAgc2Vzc2lvbi51c2VyLmNsaW5pY0lkID0gdG9rZW4uY2xpbmljSWQ7XHJcbiAgICAgICAgc2Vzc2lvbi51c2VyLmJyYW5jaElkID0gdG9rZW4uYnJhbmNoSWQ7XHJcbiAgICAgICAgc2Vzc2lvbi51c2VyLmNsaW5pY05hbWUgPSB0b2tlbi5jbGluaWNOYW1lO1xyXG4gICAgICAgIHNlc3Npb24udXNlci5icmFuY2hOYW1lID0gdG9rZW4uYnJhbmNoTmFtZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc2Vzc2lvbjtcclxuICAgIH0sXHJcbiAgfSxcclxuICBwYWdlczoge1xyXG4gICAgc2lnbkluOiAnL2xvZ2luJyxcclxuICB9LFxyXG4gIHNlY3JldDogcHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVULFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmV4dEF1dGgoYXV0aE9wdGlvbnMpO1xyXG4iXSwibmFtZXMiOlsiTmV4dEF1dGgiLCJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiYmNyeXB0IiwiUHJpc21hQ2xpZW50IiwicHJpc21hIiwiYXV0aE9wdGlvbnMiLCJwcm92aWRlcnMiLCJuYW1lIiwiY3JlZGVudGlhbHMiLCJlbWFpbCIsImxhYmVsIiwidHlwZSIsInBhc3N3b3JkIiwiYXV0aG9yaXplIiwiRXJyb3IiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaW5jbHVkZSIsImNsaW5pYyIsImJyYW5jaCIsImlzQWN0aXZlIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImhhc2hlZFBhc3N3b3JkIiwiaWQiLCJmdWxsTmFtZSIsInJvbGUiLCJjbGluaWNJZCIsImJyYW5jaElkIiwiY2xpbmljTmFtZSIsImJyYW5jaE5hbWUiLCJzZXNzaW9uIiwic3RyYXRlZ3kiLCJjYWxsYmFja3MiLCJqd3QiLCJ0b2tlbiIsInBhZ2VzIiwic2lnbkluIiwic2VjcmV0IiwicHJvY2VzcyIsImVudiIsIk5FWFRBVVRIX1NFQ1JFVCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].js\n");

/***/ }),

/***/ "(api)/./pages/api/patients/index.js":
/*!*************************************!*\
  !*** ./pages/api/patients/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_nextauth___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].js\");\n/* harmony import */ var _utils_tenantScoping__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/utils/tenantScoping */ \"(api)/./src/utils/tenantScoping.js\");\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n// Helper function to validate and sanitize patient data\nconst validateAndSanitizePatientData = (data)=>{\n    console.log(\"Validating patient data:\", data);\n    const { name, guardianName, address, age, sex, occupation, mobileNumber, chiefComplaints, medicalHistory, physicalGenerals, menstrualHistory, foodAndHabit, userId// Extract userId if present\n     } = data;\n    // Required fields validation with detailed error messages\n    const errors = [];\n    if (!name || typeof name !== \"string\" || !name.trim()) errors.push(\"Name is required\");\n    if (!address || typeof address !== \"string\" || !address.trim()) errors.push(\"Address is required\");\n    if (age === undefined || age === null || age === \"\" || isNaN(parseInt(age))) errors.push(\"Age is required and must be a number\");\n    if (!sex || sex !== \"Male\" && sex !== \"Female\" && sex !== \"Other\") errors.push(\"Sex is required (Male, Female, or Other)\");\n    // Additional validation for the commonly failing fields\n    if (!mobileNumber) {\n        errors.push(\"Mobile number is required\");\n        console.error(\"Mobile number validation failed: empty value\");\n    } else if (typeof mobileNumber !== \"string\") {\n        errors.push(\"Mobile number must be a string\");\n        console.error(\"Mobile number validation failed: not a string\", typeof mobileNumber);\n    } else if (!mobileNumber.trim()) {\n        errors.push(\"Mobile number cannot be empty\");\n        console.error(\"Mobile number validation failed: empty string\");\n    }\n    if (!chiefComplaints) {\n        errors.push(\"Chief complaints are required\");\n        console.error(\"Chief complaints validation failed: empty value\");\n    } else if (typeof chiefComplaints !== \"string\") {\n        errors.push(\"Chief complaints must be a string\");\n        console.error(\"Chief complaints validation failed: not a string\", typeof chiefComplaints);\n    } else if (!chiefComplaints.trim()) {\n        errors.push(\"Chief complaints cannot be empty\");\n        console.error(\"Chief complaints validation failed: empty string\");\n    }\n    // Additional validations\n    if (typeof age === \"number\" && (age <= 0 || age > 150)) {\n        errors.push(\"Age must be between 1 and 150\");\n    }\n    if (mobileNumber && !/^[0-9-+()\\\\s]+$/.test(mobileNumber)) {\n        errors.push(\"Mobile number contains invalid characters\");\n    }\n    if (errors.length > 0) {\n        console.log(\"Validation errors:\", errors);\n        return {\n            valid: false,\n            errors\n        };\n    }\n    // Create default values for optional JSON fields\n    const defaultMedicalHistory = {\n        pastHistory: {\n            allergy: false,\n            anemia: false,\n            arthritis: false,\n            asthma: false,\n            cancer: false,\n            diabetes: false,\n            heartDisease: false,\n            hypertension: false,\n            thyroid: false,\n            tuberculosis: false\n        },\n        familyHistory: {\n            diabetes: false,\n            hypertension: false,\n            thyroid: false,\n            tuberculosis: false,\n            cancer: false\n        }\n    };\n    const defaultPhysicalGenerals = {\n        appetite: \"\",\n        bowel: \"\",\n        urine: \"\",\n        sweating: \"\",\n        sleep: \"\",\n        thirst: \"\",\n        addictions: \"\"\n    };\n    const defaultFoodAndHabit = {\n        foodHabit: \"\",\n        addictions: \"\"\n    };\n    const defaultMenstrualHistory = sex === \"Female\" ? {\n        menses: \"\",\n        menopause: \"No\",\n        leucorrhoea: \"\",\n        gonorrhea: \"No\",\n        otherDischarges: \"\"\n    } : null;\n    // Safe parsing of JSON fields\n    let sanitizedMedicalHistory;\n    let sanitizedPhysicalGenerals;\n    let sanitizedMenstrualHistory;\n    let sanitizedFoodAndHabit;\n    try {\n        sanitizedMedicalHistory = medicalHistory ? typeof medicalHistory === \"string\" ? JSON.parse(medicalHistory) : medicalHistory : defaultMedicalHistory;\n    } catch (e) {\n        console.log(\"Error parsing medicalHistory:\", e);\n        sanitizedMedicalHistory = defaultMedicalHistory;\n    }\n    try {\n        sanitizedPhysicalGenerals = physicalGenerals ? typeof physicalGenerals === \"string\" ? JSON.parse(physicalGenerals) : physicalGenerals : defaultPhysicalGenerals;\n    } catch (e) {\n        console.log(\"Error parsing physicalGenerals:\", e);\n        sanitizedPhysicalGenerals = defaultPhysicalGenerals;\n    }\n    try {\n        sanitizedMenstrualHistory = sex === \"Female\" && menstrualHistory ? typeof menstrualHistory === \"string\" ? JSON.parse(menstrualHistory) : menstrualHistory : defaultMenstrualHistory;\n    } catch (e) {\n        console.log(\"Error parsing menstrualHistory:\", e);\n        sanitizedMenstrualHistory = defaultMenstrualHistory;\n    }\n    try {\n        sanitizedFoodAndHabit = foodAndHabit ? typeof foodAndHabit === \"string\" ? JSON.parse(foodAndHabit) : foodAndHabit : defaultFoodAndHabit;\n    } catch (e) {\n        console.log(\"Error parsing foodAndHabit:\", e);\n        sanitizedFoodAndHabit = defaultFoodAndHabit;\n    }\n    console.log(\"Data sanitization complete\");\n    // Prepare the sanitized data\n    const sanitizedData = {\n        name: name.trim(),\n        guardianName: guardianName ? guardianName.trim() : null,\n        address: address.trim(),\n        age: parseInt(age),\n        sex,\n        occupation: occupation ? occupation.trim() : null,\n        mobileNumber: mobileNumber.trim(),\n        chiefComplaints: chiefComplaints.trim(),\n        stringifiedMedicalHistory: JSON.stringify(sanitizedMedicalHistory),\n        stringifiedPhysicalGenerals: JSON.stringify(sanitizedPhysicalGenerals),\n        stringifiedMenstrualHistory: sex === \"Female\" ? JSON.stringify(sanitizedMenstrualHistory) : null,\n        stringifiedFoodAndHabit: JSON.stringify(sanitizedFoodAndHabit)\n    };\n    // If userId is provided, include it in the sanitized data\n    if (userId) {\n        console.log(\"User ID provided in data:\", userId);\n        sanitizedData.userId = userId;\n    }\n    return {\n        valid: true,\n        sanitizedData\n    };\n};\nasync function handler(req, res) {\n    console.log(`API Request: ${req.method} ${req.url}`);\n    console.log(\"Headers:\", JSON.stringify(req.headers));\n    // Log request body for POST and PUT requests\n    if ([\n        \"POST\",\n        \"PUT\"\n    ].includes(req.method)) {\n        console.log(\"Request body:\", JSON.stringify(req.body));\n    }\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_2__.authOptions);\n    console.log(\"Session from getServerSession:\", JSON.stringify(session));\n    if (!session) {\n        return res.status(401).json({\n            error: \"Unauthorized\"\n        });\n    }\n    try {\n        switch(req.method){\n            case \"GET\":\n                // Use the tenant scoping utility to build the query\n                const queryParams = (0,_utils_tenantScoping__WEBPACK_IMPORTED_MODULE_3__.applyTenantScope)({\n                    include: {\n                        investigations: true,\n                        user: {\n                            select: {\n                                id: true,\n                                email: true,\n                                fullName: true,\n                                role: true\n                            }\n                        },\n                        branch: {\n                            select: {\n                                id: true,\n                                name: true,\n                                clinic: {\n                                    select: {\n                                        id: true,\n                                        name: true\n                                    }\n                                }\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: \"desc\"\n                    }\n                }, session, {\n                    includePatientFilter: true\n                });\n                const patients = await prisma.patient.findMany(queryParams);\n                // Transform data to match frontend expectations\n                const transformedPatients = patients.map((patient)=>{\n                    // Parse JSON fields stored as strings\n                    const medicalHistory = patient.medicalHistory ? JSON.parse(patient.medicalHistory) : {\n                        pastHistory: {\n                            allergy: false,\n                            anemia: false,\n                            arthritis: false,\n                            asthma: false,\n                            cancer: false,\n                            diabetes: false,\n                            heartDisease: false,\n                            hypertension: false,\n                            thyroid: false,\n                            tuberculosis: false\n                        },\n                        familyHistory: {\n                            diabetes: false,\n                            hypertension: false,\n                            thyroid: false,\n                            tuberculosis: false,\n                            cancer: false\n                        }\n                    };\n                    const physicalGenerals = patient.physicalGenerals ? JSON.parse(patient.physicalGenerals) : {\n                        appetite: \"\",\n                        bowel: \"\",\n                        urine: \"\",\n                        sweating: \"\",\n                        sleep: \"\",\n                        thirst: \"\",\n                        addictions: \"\"\n                    };\n                    const menstrualHistory = patient.menstrualHistory ? JSON.parse(patient.menstrualHistory) : patient.sex === \"Female\" ? {\n                        menses: \"\",\n                        menopause: \"No\",\n                        leucorrhoea: \"\",\n                        gonorrhea: \"No\",\n                        otherDischarges: \"\"\n                    } : null;\n                    const foodAndHabit = patient.foodAndHabit ? JSON.parse(patient.foodAndHabit) : {\n                        foodHabit: \"\",\n                        addictions: \"\"\n                    };\n                    return {\n                        id: patient.id,\n                        name: patient.name,\n                        guardianName: patient.guardianName,\n                        address: patient.address,\n                        age: patient.age,\n                        sex: patient.sex,\n                        occupation: patient.occupation || \"\",\n                        mobileNumber: patient.mobileNumber,\n                        chiefComplaints: patient.chiefComplaints,\n                        createdAt: patient.createdAt,\n                        updatedAt: patient.updatedAt,\n                        userId: patient.userId,\n                        medicalHistory,\n                        physicalGenerals,\n                        menstrualHistory,\n                        foodAndHabit,\n                        investigations: patient.investigations || [],\n                        user: patient.user\n                    };\n                });\n                return res.status(200).json(transformedPatients);\n            case \"POST\":\n                console.log(\"POST /api/patients - Request received\");\n                console.log(\"Request body:\", req.body);\n                try {\n                    // Check for empty required fields before validation\n                    if (!req.body.mobileNumber) {\n                        console.log(\"Mobile number missing in request\");\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Mobile number is required\",\n                            details: \"Mobile number field is missing or empty\"\n                        });\n                    }\n                    if (!req.body.chiefComplaints) {\n                        console.log(\"Chief complaints missing in request\");\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Chief complaints are required\",\n                            details: \"Chief complaints field is missing or empty\"\n                        });\n                    }\n                    // Validate and sanitize patient data\n                    const validationResult = validateAndSanitizePatientData(req.body);\n                    // If validation fails, return error\n                    if (!validationResult.valid) {\n                        console.log(\"Patient data validation failed:\", validationResult.errors);\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Please check the form for errors\",\n                            details: validationResult.errors.join(\", \")\n                        });\n                    }\n                    console.log(\"Patient data validated successfully\");\n                    const { name, guardianName, address, age, sex, occupation, mobileNumber, chiefComplaints, stringifiedMedicalHistory, stringifiedPhysicalGenerals, stringifiedMenstrualHistory, stringifiedFoodAndHabit } = validationResult.sanitizedData;\n                    // Create the patient record\n                    console.log(\"Creating patient record in database with data:\", {\n                        name,\n                        guardianName,\n                        address,\n                        age,\n                        sex,\n                        occupation,\n                        mobileNumber,\n                        chiefComplaints,\n                        hasMedicalHistory: !!stringifiedMedicalHistory,\n                        hasPhysicalGenerals: !!stringifiedPhysicalGenerals,\n                        hasMenstrualHistory: !!stringifiedMenstrualHistory,\n                        hasFoodAndHabit: !!stringifiedFoodAndHabit\n                    });\n                    // Debug session information\n                    console.log(\"Session object:\", JSON.stringify(session));\n                    console.log(\"User object:\", JSON.stringify(session.user));\n                    console.log(\"User ID:\", session.user?.id);\n                    // Check if userId is available\n                    if (!session.user || !session.user.id) {\n                        console.error(\"User session missing or invalid\", JSON.stringify(session));\n                        // If user ID is missing but we have a session, try to use it anyway\n                        if (session && session.user && session.user.email) {\n                            console.log(\"Attempting to find user by email:\", session.user.email);\n                            // Try to find the user by email\n                            const user = await prisma.user.findUnique({\n                                where: {\n                                    email: session.user.email\n                                }\n                            });\n                            if (user) {\n                                console.log(\"Found user by email:\", user.id);\n                                session.user.id = user.id; // Set the ID\n                            } else {\n                                console.error(\"Could not find user by email\");\n                                return res.status(400).json({\n                                    error: \"Authentication error\",\n                                    message: \"Unable to save patient\",\n                                    details: \"User ID is missing and could not be retrieved\"\n                                });\n                            }\n                        } else {\n                            return res.status(400).json({\n                                error: \"Authentication error\",\n                                message: \"Unable to save patient\",\n                                details: \"User ID is missing or invalid\"\n                            });\n                        }\n                    }\n                    // Make sure user has a branch assigned\n                    if (!session.user.branchId) {\n                        return res.status(400).json({\n                            error: \"Missing branch\",\n                            message: \"You must be assigned to a branch to register patients\",\n                            details: \"User is not associated with any branch\"\n                        });\n                    }\n                    // Prepare data for patient creation\n                    const patientData = {\n                        name,\n                        guardianName,\n                        address,\n                        age,\n                        sex,\n                        occupation,\n                        mobileNumber,\n                        chiefComplaints,\n                        medicalHistory: stringifiedMedicalHistory,\n                        physicalGenerals: stringifiedPhysicalGenerals,\n                        menstrualHistory: stringifiedMenstrualHistory,\n                        foodAndHabit: stringifiedFoodAndHabit,\n                        // Use the userId field directly\n                        userId: session.user.id,\n                        // Add branch information\n                        branchId: session.user.branchId\n                    };\n                    console.log(\"Final patient data for creation:\", JSON.stringify(patientData));\n                    const newPatient = await prisma.patient.create({\n                        data: patientData,\n                        include: {\n                            investigations: true\n                        }\n                    });\n                    console.log(\"Patient created successfully:\", newPatient.id);\n                    // Parse the JSON fields back for the response\n                    const transformedNewPatient = {\n                        ...newPatient,\n                        medicalHistory: stringifiedMedicalHistory ? JSON.parse(stringifiedMedicalHistory) : null,\n                        physicalGenerals: stringifiedPhysicalGenerals ? JSON.parse(stringifiedPhysicalGenerals) : null,\n                        menstrualHistory: stringifiedMenstrualHistory ? JSON.parse(stringifiedMenstrualHistory) : null,\n                        foodAndHabit: stringifiedFoodAndHabit ? JSON.parse(stringifiedFoodAndHabit) : null\n                    };\n                    return res.status(201).json(transformedNewPatient);\n                } catch (error) {\n                    console.error(\"Error creating patient:\", error);\n                    // Enhanced error response with more details\n                    return res.status(400).json({\n                        error: \"Failed to create patient\",\n                        message: \"Unable to save patient\",\n                        details: error.message || \"Database error occurred\",\n                        code: error.code\n                    });\n                }\n            default:\n                res.setHeader(\"Allow\", [\n                    \"GET\",\n                    \"POST\"\n                ]);\n                return res.status(405).json({\n                    error: `Method ${req.method} not allowed`\n                });\n        }\n    } catch (error) {\n        console.error(\"Database error:\", error);\n        // Enhanced error logging\n        const errorMessage = error.message || \"Unknown database error\";\n        const errorDetails = error.meta && error.meta.cause ? error.meta.cause : \"No additional details\";\n        const errorCode = error.code || \"UNKNOWN_ERROR\";\n        console.log(\"Request body:\", req.body);\n        console.log(\"Error details:\", {\n            message: errorMessage,\n            details: errorDetails,\n            code: errorCode,\n            stack: error.stack\n        });\n        return res.status(400).json({\n            error: \"Invalid request data\",\n            message: errorMessage,\n            details: errorDetails,\n            code: errorCode\n        });\n    } finally{\n        await prisma.$disconnect();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/patients/index.js\n");

/***/ }),

/***/ "(api)/./src/utils/tenantScoping.js":
/*!************************************!*\
  !*** ./src/utils/tenantScoping.js ***!
  \************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyTenantScope: () => (/* binding */ applyTenantScope),\n/* harmony export */   getTenantScopeFilter: () => (/* binding */ getTenantScopeFilter),\n/* harmony export */   hasAccessToResource: () => (/* binding */ hasAccessToResource)\n/* harmony export */ });\n/**\r\n * Tenant Scoping Utility\r\n * \r\n * Provides helper functions for applying tenant scoping to database queries\r\n */ /**\r\n * Get tenant scope filter for Prisma queries based on user session\r\n * @param {Object} session - User session with role and tenant information\r\n * @param {Object} options - Additional options for filtering\r\n * @returns {Object} Prisma compatible where clause object\r\n */ function getTenantScopeFilter(session, options = {}) {\n    const { includePatientFilter = false, includeUserFilter = false } = options;\n    if (!session || !session.user) {\n        throw new Error(\"Invalid session: User session is required for tenant scoping\");\n    }\n    const { role, id, clinicId, branchId } = session.user;\n    // Base filter\n    const filter = {};\n    // Apply scoping based on role\n    switch(role){\n        case \"superadmin\":\n            break;\n        case \"clinicadmin\":\n            // Clinic admin has access to their clinic only\n            if (clinicId) {\n                if (includeUserFilter) {\n                    filter.clinicId = clinicId;\n                }\n                if (includePatientFilter) {\n                    filter.branch = {\n                        clinicId: clinicId\n                    };\n                }\n            }\n            break;\n        case \"branchadmin\":\n            // Branch admin has access to their branch only\n            if (branchId) {\n                if (includeUserFilter) {\n                    filter.branchId = branchId;\n                }\n                if (includePatientFilter) {\n                    filter.branchId = branchId;\n                }\n            }\n            break;\n        case \"doctor\":\n        default:\n            // Doctor only sees their own records\n            if (includeUserFilter) {\n                filter.id = id;\n            }\n            if (includePatientFilter) {\n                filter.userId = id;\n                // Additionally scope to branch if available\n                if (branchId) {\n                    filter.branchId = branchId;\n                }\n            }\n            break;\n    }\n    return filter;\n}\n/**\r\n * Apply tenant scope to Prisma parameters\r\n * @param {Object} prismaParams - Existing Prisma query parameters\r\n * @param {Object} session - User session with role and tenant information\r\n * @param {Object} options - Additional options for filtering\r\n * @returns {Object} Updated Prisma parameters with tenant scoping\r\n */ function applyTenantScope(prismaParams, session, options = {}) {\n    const scopeFilter = getTenantScopeFilter(session, options);\n    // If there are no filters to apply, return original params\n    if (Object.keys(scopeFilter).length === 0) {\n        return prismaParams;\n    }\n    // Create a deep copy of the params\n    const scopedParams = {\n        ...prismaParams\n    };\n    // Initialize the where clause if it doesn't exist\n    if (!scopedParams.where) {\n        scopedParams.where = {};\n    }\n    // Merge the scope filter with the existing where clause\n    scopedParams.where = {\n        ...scopedParams.where,\n        ...scopeFilter\n    };\n    return scopedParams;\n}\n/**\r\n * Check if the current user has access to a specific tenant resource\r\n * @param {Object} session - User session with role and tenant information\r\n * @param {Object} resource - Resource object with tenant identifiers\r\n * @returns {boolean} Whether the user has access to the resource\r\n */ function hasAccessToResource(session, resource) {\n    if (!session?.user || !resource) return false;\n    const { role, clinicId, branchId } = session.user;\n    // SuperAdmin has access to everything\n    if (role === \"superadmin\") return true;\n    // For resources with branchId (e.g., patients)\n    if (resource.branchId) {\n        // For branch specific roles\n        if (role === \"branchadmin\" || role === \"doctor\") {\n            return resource.branchId === branchId;\n        }\n        // For clinic admin, check if the branch belongs to their clinic\n        if (role === \"clinicadmin\" && resource.branch?.clinicId) {\n            return resource.branch.clinicId === clinicId;\n        }\n    }\n    // For resources with clinicId (e.g., branches)\n    if (resource.clinicId) {\n        if (role === \"clinicadmin\") {\n            return resource.clinicId === clinicId;\n        }\n    }\n    // For user resources\n    if (role === \"doctor\" && resource.userId) {\n        return resource.userId === session.user.id;\n    }\n    // Default deny\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3RDO0lBQ0Y7SUFFQSwrQ0FBK0M7SUFDL0MsSUFBSWMsU0FBU2QsUUFBUSxFQUFFO1FBQ3JCLElBQUlGLFNBQVMsZUFBZTtZQUMxQixPQUFPZ0IsU0FBU2QsUUFBUSxLQUFLQTtRQUMvQjtJQUNGO0lBRUEscUJBQXFCO0lBQ3JCLElBQUlGLFNBQVMsWUFBWWdCLFNBQVNWLE1BQU0sRUFBRTtRQUN4QyxPQUFPVSxTQUFTVixNQUFNLEtBQUtaLFFBQVFJLElBQUksQ0FBQ0csRUFBRTtJQUM1QztJQUVBLGVBQWU7SUFDZixPQUFPO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjYXJlLWNlbnRlci1uZXh0anMvLi9zcmMvdXRpbHMvdGVuYW50U2NvcGluZy5qcz85NDIxIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUZW5hbnQgU2NvcGluZyBVdGlsaXR5XHJcbiAqIFxyXG4gKiBQcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIGZvciBhcHBseWluZyB0ZW5hbnQgc2NvcGluZyB0byBkYXRhYmFzZSBxdWVyaWVzXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEdldCB0ZW5hbnQgc2NvcGUgZmlsdGVyIGZvciBQcmlzbWEgcXVlcmllcyBiYXNlZCBvbiB1c2VyIHNlc3Npb25cclxuICogQHBhcmFtIHtPYmplY3R9IHNlc3Npb24gLSBVc2VyIHNlc3Npb24gd2l0aCByb2xlIGFuZCB0ZW5hbnQgaW5mb3JtYXRpb25cclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBBZGRpdGlvbmFsIG9wdGlvbnMgZm9yIGZpbHRlcmluZ1xyXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBQcmlzbWEgY29tcGF0aWJsZSB3aGVyZSBjbGF1c2Ugb2JqZWN0XHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGVuYW50U2NvcGVGaWx0ZXIoc2Vzc2lvbiwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgY29uc3QgeyBpbmNsdWRlUGF0aWVudEZpbHRlciA9IGZhbHNlLCBpbmNsdWRlVXNlckZpbHRlciA9IGZhbHNlIH0gPSBvcHRpb25zO1xyXG4gIFxyXG4gIGlmICghc2Vzc2lvbiB8fCAhc2Vzc2lvbi51c2VyKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc2Vzc2lvbjogVXNlciBzZXNzaW9uIGlzIHJlcXVpcmVkIGZvciB0ZW5hbnQgc2NvcGluZycpO1xyXG4gIH1cclxuICBcclxuICBjb25zdCB7IHJvbGUsIGlkLCBjbGluaWNJZCwgYnJhbmNoSWQgfSA9IHNlc3Npb24udXNlcjtcclxuICBcclxuICAvLyBCYXNlIGZpbHRlclxyXG4gIGNvbnN0IGZpbHRlciA9IHt9O1xyXG4gIFxyXG4gIC8vIEFwcGx5IHNjb3BpbmcgYmFzZWQgb24gcm9sZVxyXG4gIHN3aXRjaCAocm9sZSkge1xyXG4gICAgY2FzZSAnc3VwZXJhZG1pbic6XHJcbiAgICAgIC8vIFN1cGVyYWRtaW4gaGFzIGFjY2VzcyB0byBldmVyeXRoaW5nIC0gbm8gZmlsdGVycyBuZWVkZWRcclxuICAgICAgYnJlYWs7XHJcbiAgICAgIFxyXG4gICAgY2FzZSAnY2xpbmljYWRtaW4nOlxyXG4gICAgICAvLyBDbGluaWMgYWRtaW4gaGFzIGFjY2VzcyB0byB0aGVpciBjbGluaWMgb25seVxyXG4gICAgICBpZiAoY2xpbmljSWQpIHtcclxuICAgICAgICBpZiAoaW5jbHVkZVVzZXJGaWx0ZXIpIHtcclxuICAgICAgICAgIGZpbHRlci5jbGluaWNJZCA9IGNsaW5pY0lkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoaW5jbHVkZVBhdGllbnRGaWx0ZXIpIHtcclxuICAgICAgICAgIGZpbHRlci5icmFuY2ggPSB7XHJcbiAgICAgICAgICAgIGNsaW5pY0lkOiBjbGluaWNJZFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgICAgIFxyXG4gICAgY2FzZSAnYnJhbmNoYWRtaW4nOlxyXG4gICAgICAvLyBCcmFuY2ggYWRtaW4gaGFzIGFjY2VzcyB0byB0aGVpciBicmFuY2ggb25seVxyXG4gICAgICBpZiAoYnJhbmNoSWQpIHtcclxuICAgICAgICBpZiAoaW5jbHVkZVVzZXJGaWx0ZXIpIHtcclxuICAgICAgICAgIGZpbHRlci5icmFuY2hJZCA9IGJyYW5jaElkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAoaW5jbHVkZVBhdGllbnRGaWx0ZXIpIHtcclxuICAgICAgICAgIGZpbHRlci5icmFuY2hJZCA9IGJyYW5jaElkO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBicmVhaztcclxuICAgICAgXHJcbiAgICBjYXNlICdkb2N0b3InOlxyXG4gICAgZGVmYXVsdDpcclxuICAgICAgLy8gRG9jdG9yIG9ubHkgc2VlcyB0aGVpciBvd24gcmVjb3Jkc1xyXG4gICAgICBpZiAoaW5jbHVkZVVzZXJGaWx0ZXIpIHtcclxuICAgICAgICBmaWx0ZXIuaWQgPSBpZDtcclxuICAgICAgfVxyXG4gICAgICBcclxuICAgICAgaWYgKGluY2x1ZGVQYXRpZW50RmlsdGVyKSB7XHJcbiAgICAgICAgZmlsdGVyLnVzZXJJZCA9IGlkO1xyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIEFkZGl0aW9uYWxseSBzY29wZSB0byBicmFuY2ggaWYgYXZhaWxhYmxlXHJcbiAgICAgICAgaWYgKGJyYW5jaElkKSB7XHJcbiAgICAgICAgICBmaWx0ZXIuYnJhbmNoSWQgPSBicmFuY2hJZDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgYnJlYWs7XHJcbiAgfVxyXG4gIFxyXG4gIHJldHVybiBmaWx0ZXI7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBBcHBseSB0ZW5hbnQgc2NvcGUgdG8gUHJpc21hIHBhcmFtZXRlcnNcclxuICogQHBhcmFtIHtPYmplY3R9IHByaXNtYVBhcmFtcyAtIEV4aXN0aW5nIFByaXNtYSBxdWVyeSBwYXJhbWV0ZXJzXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uIC0gVXNlciBzZXNzaW9uIHdpdGggcm9sZSBhbmQgdGVuYW50IGluZm9ybWF0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gQWRkaXRpb25hbCBvcHRpb25zIGZvciBmaWx0ZXJpbmdcclxuICogQHJldHVybnMge09iamVjdH0gVXBkYXRlZCBQcmlzbWEgcGFyYW1ldGVycyB3aXRoIHRlbmFudCBzY29waW5nXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlUZW5hbnRTY29wZShwcmlzbWFQYXJhbXMsIHNlc3Npb24sIG9wdGlvbnMgPSB7fSkge1xyXG4gIGNvbnN0IHNjb3BlRmlsdGVyID0gZ2V0VGVuYW50U2NvcGVGaWx0ZXIoc2Vzc2lvbiwgb3B0aW9ucyk7XHJcbiAgXHJcbiAgLy8gSWYgdGhlcmUgYXJlIG5vIGZpbHRlcnMgdG8gYXBwbHksIHJldHVybiBvcmlnaW5hbCBwYXJhbXNcclxuICBpZiAoT2JqZWN0LmtleXMoc2NvcGVGaWx0ZXIpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgcmV0dXJuIHByaXNtYVBhcmFtcztcclxuICB9XHJcbiAgXHJcbiAgLy8gQ3JlYXRlIGEgZGVlcCBjb3B5IG9mIHRoZSBwYXJhbXNcclxuICBjb25zdCBzY29wZWRQYXJhbXMgPSB7IC4uLnByaXNtYVBhcmFtcyB9O1xyXG4gIFxyXG4gIC8vIEluaXRpYWxpemUgdGhlIHdoZXJlIGNsYXVzZSBpZiBpdCBkb2Vzbid0IGV4aXN0XHJcbiAgaWYgKCFzY29wZWRQYXJhbXMud2hlcmUpIHtcclxuICAgIHNjb3BlZFBhcmFtcy53aGVyZSA9IHt9O1xyXG4gIH1cclxuICBcclxuICAvLyBNZXJnZSB0aGUgc2NvcGUgZmlsdGVyIHdpdGggdGhlIGV4aXN0aW5nIHdoZXJlIGNsYXVzZVxyXG4gIHNjb3BlZFBhcmFtcy53aGVyZSA9IHtcclxuICAgIC4uLnNjb3BlZFBhcmFtcy53aGVyZSxcclxuICAgIC4uLnNjb3BlRmlsdGVyXHJcbiAgfTtcclxuICBcclxuICByZXR1cm4gc2NvcGVkUGFyYW1zO1xyXG59XHJcblxyXG4vKipcclxuICogQ2hlY2sgaWYgdGhlIGN1cnJlbnQgdXNlciBoYXMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgdGVuYW50IHJlc291cmNlXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXNzaW9uIC0gVXNlciBzZXNzaW9uIHdpdGggcm9sZSBhbmQgdGVuYW50IGluZm9ybWF0aW9uXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSByZXNvdXJjZSAtIFJlc291cmNlIG9iamVjdCB3aXRoIHRlbmFudCBpZGVudGlmaWVyc1xyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gV2hldGhlciB0aGUgdXNlciBoYXMgYWNjZXNzIHRvIHRoZSByZXNvdXJjZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGhhc0FjY2Vzc1RvUmVzb3VyY2Uoc2Vzc2lvbiwgcmVzb3VyY2UpIHtcclxuICBpZiAoIXNlc3Npb24/LnVzZXIgfHwgIXJlc291cmNlKSByZXR1cm4gZmFsc2U7XHJcbiAgXHJcbiAgY29uc3QgeyByb2xlLCBjbGluaWNJZCwgYnJhbmNoSWQgfSA9IHNlc3Npb24udXNlcjtcclxuICBcclxuICAvLyBTdXBlckFkbWluIGhhcyBhY2Nlc3MgdG8gZXZlcnl0aGluZ1xyXG4gIGlmIChyb2xlID09PSAnc3VwZXJhZG1pbicpIHJldHVybiB0cnVlO1xyXG4gIFxyXG4gIC8vIEZvciByZXNvdXJjZXMgd2l0aCBicmFuY2hJZCAoZS5nLiwgcGF0aWVudHMpXHJcbiAgaWYgKHJlc291cmNlLmJyYW5jaElkKSB7XHJcbiAgICAvLyBGb3IgYnJhbmNoIHNwZWNpZmljIHJvbGVzXHJcbiAgICBpZiAocm9sZSA9PT0gJ2JyYW5jaGFkbWluJyB8fCByb2xlID09PSAnZG9jdG9yJykge1xyXG4gICAgICByZXR1cm4gcmVzb3VyY2UuYnJhbmNoSWQgPT09IGJyYW5jaElkO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICAvLyBGb3IgY2xpbmljIGFkbWluLCBjaGVjayBpZiB0aGUgYnJhbmNoIGJlbG9uZ3MgdG8gdGhlaXIgY2xpbmljXHJcbiAgICBpZiAocm9sZSA9PT0gJ2NsaW5pY2FkbWluJyAmJiByZXNvdXJjZS5icmFuY2g/LmNsaW5pY0lkKSB7XHJcbiAgICAgIHJldHVybiByZXNvdXJjZS5icmFuY2guY2xpbmljSWQgPT09IGNsaW5pY0lkO1xyXG4gICAgfVxyXG4gIH1cclxuICBcclxuICAvLyBGb3IgcmVzb3VyY2VzIHdpdGggY2xpbmljSWQgKGUuZy4sIGJyYW5jaGVzKVxyXG4gIGlmIChyZXNvdXJjZS5jbGluaWNJZCkge1xyXG4gICAgaWYgKHJvbGUgPT09ICdjbGluaWNhZG1pbicpIHtcclxuICAgICAgcmV0dXJuIHJlc291cmNlLmNsaW5pY0lkID09PSBjbGluaWNJZDtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbiAgLy8gRm9yIHVzZXIgcmVzb3VyY2VzXHJcbiAgaWYgKHJvbGUgPT09ICdkb2N0b3InICYmIHJlc291cmNlLnVzZXJJZCkge1xyXG4gICAgcmV0dXJuIHJlc291cmNlLnVzZXJJZCA9PT0gc2Vzc2lvbi51c2VyLmlkO1xyXG4gIH1cclxuICBcclxuICAvLyBEZWZhdWx0IGRlbnlcclxuICByZXR1cm4gZmFsc2U7XHJcbn1cclxuIl0sIm5hbWVzIjpbImdldFRlbmFudFNjb3BlRmlsdGVyIiwic2Vzc2lvbiIsIm9wdGlvbnMiLCJpbmNsdWRlUGF0aWVudEZpbHRlciIsImluY2x1ZGVVc2VyRmlsdGVyIiwidXNlciIsIkVycm9yIiwicm9sZSIsImlkIiwiY2xpbmljSWQiLCJicmFuY2hJZCIsImZpbHRlciIsImJyYW5jaCIsInVzZXJJZCIsImFwcGx5VGVuYW50U2NvcGUiLCJwcmlzbWFQYXJhbXMiLCJzY29wZUZpbHRlciIsIk9iamVjdCIsImtleXMiLCJsZW5ndGgiLCJzY29wZWRQYXJhbXMiLCJ3aGVyZSIsImhhc0FjY2Vzc1RvUmVzb3VyY2UiLCJyZXNvdXJjZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/utils/tenantScoping.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();