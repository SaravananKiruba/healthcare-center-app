"use strict";(()=>{var e={};e.id=363,e.ids=[363],e.modules={3524:e=>{e.exports=require("@prisma/client")},8432:e=>{e.exports=require("bcryptjs")},2113:e=>{e.exports=require("next-auth/next")},145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6249:(e,r)=>{Object.defineProperty(r,"l",{enumerable:!0,get:function(){return function e(r,i){return i in r?r[i]:"then"in r&&"function"==typeof r.then?r.then(r=>e(r,i)):"function"==typeof r&&"default"===i?r:void 0}}})},7508:(e,r,i)=>{i.r(r),i.d(r,{config:()=>h,default:()=>p,routeModule:()=>g});var s={};i.r(s),i.d(s,{default:()=>m});var t=i(1802),a=i(7153),n=i(6249),o=i(3524),l=i(2113),d=i(7309);let c=new o.PrismaClient,u=e=>{let r,i,s,t;console.log("Validating patient data:",e);let{name:a,guardianName:n,address:o,age:l,sex:d,occupation:c,mobileNumber:u,chiefComplaints:m,medicalHistory:p,physicalGenerals:h,menstrualHistory:g,foodAndHabit:b,userId:f}=e,y=[];if(a&&"string"==typeof a&&a.trim()||y.push("Name is required"),o&&"string"==typeof o&&o.trim()||y.push("Address is required"),(null==l||""===l||isNaN(parseInt(l)))&&y.push("Age is required and must be a number"),d&&("Male"===d||"Female"===d||"Other"===d)||y.push("Sex is required (Male, Female, or Other)"),u?"string"!=typeof u?(y.push("Mobile number must be a string"),console.error("Mobile number validation failed: not a string",typeof u)):u.trim()||(y.push("Mobile number cannot be empty"),console.error("Mobile number validation failed: empty string")):(y.push("Mobile number is required"),console.error("Mobile number validation failed: empty value")),m?"string"!=typeof m?(y.push("Chief complaints must be a string"),console.error("Chief complaints validation failed: not a string",typeof m)):m.trim()||(y.push("Chief complaints cannot be empty"),console.error("Chief complaints validation failed: empty string")):(y.push("Chief complaints are required"),console.error("Chief complaints validation failed: empty value")),"number"==typeof l&&(l<=0||l>150)&&y.push("Age must be between 1 and 150"),u&&!/^[0-9-+()\\s]+$/.test(u)&&y.push("Mobile number contains invalid characters"),y.length>0)return console.log("Validation errors:",y),{valid:!1,errors:y};let N={pastHistory:{allergy:!1,anemia:!1,arthritis:!1,asthma:!1,cancer:!1,diabetes:!1,heartDisease:!1,hypertension:!1,thyroid:!1,tuberculosis:!1},familyHistory:{diabetes:!1,hypertension:!1,thyroid:!1,tuberculosis:!1,cancer:!1}},v={appetite:"",bowel:"",urine:"",sweating:"",sleep:"",thirst:"",addictions:""},I={foodHabit:"",addictions:""},w="Female"===d?{menses:"",menopause:"No",leucorrhoea:"",gonorrhea:"No",otherDischarges:""}:null;try{r=p?"string"==typeof p?JSON.parse(p):p:N}catch(e){console.log("Error parsing medicalHistory:",e),r=N}try{i=h?"string"==typeof h?JSON.parse(h):h:v}catch(e){console.log("Error parsing physicalGenerals:",e),i=v}try{s="Female"===d&&g?"string"==typeof g?JSON.parse(g):g:w}catch(e){console.log("Error parsing menstrualHistory:",e),s=w}try{t=b?"string"==typeof b?JSON.parse(b):b:I}catch(e){console.log("Error parsing foodAndHabit:",e),t=I}console.log("Data sanitization complete");let P={name:a.trim(),guardianName:n?n.trim():null,address:o.trim(),age:parseInt(l),sex:d,occupation:c?c.trim():null,mobileNumber:u.trim(),chiefComplaints:m.trim(),stringifiedMedicalHistory:JSON.stringify(r),stringifiedPhysicalGenerals:JSON.stringify(i),stringifiedMenstrualHistory:"Female"===d?JSON.stringify(s):null,stringifiedFoodAndHabit:JSON.stringify(t)};return f&&(console.log("User ID provided in data:",f),P.userId=f),{valid:!0,sanitizedData:P}};async function m(e,r){console.log(`API Request: ${e.method} ${e.url}`),console.log("Headers:",JSON.stringify(e.headers)),["POST","PUT"].includes(e.method)&&console.log("Request body:",JSON.stringify(e.body));let i=await (0,l.getServerSession)(e,r,d.authOptions);if(console.log("Session from getServerSession:",JSON.stringify(i)),!i)return r.status(401).json({error:"Unauthorized"});try{switch(e.method){case"GET":let s=function(e,r,i={}){let s=function(e,r={}){let{includePatientFilter:i=!1,includeUserFilter:s=!1}=r;if(!e||!e.user)throw Error("Invalid session: User session is required for tenant scoping");let{role:t,id:a,clinicId:n,branchId:o}=e.user,l={};switch(t){case"superadmin":break;case"clinicadmin":n&&(s&&(l.clinicId=n),i&&(l.branch={clinicId:n}));break;case"branchadmin":o&&(s&&(l.branchId=o),i&&(l.branchId=o));break;default:s&&(l.id=a),i&&(l.userId=a,o&&(l.branchId=o))}return l}(r,i);if(0===Object.keys(s).length)return e;let t={...e};return t.where||(t.where={}),t.where={...t.where,...s},t}({include:{investigations:!0,user:{select:{id:!0,email:!0,fullName:!0,role:!0}},branch:{select:{id:!0,name:!0,clinic:{select:{id:!0,name:!0}}}}},orderBy:{createdAt:"desc"}},i,{includePatientFilter:!0}),t=(await c.patient.findMany(s)).map(e=>{let r=e.medicalHistory?JSON.parse(e.medicalHistory):{pastHistory:{allergy:!1,anemia:!1,arthritis:!1,asthma:!1,cancer:!1,diabetes:!1,heartDisease:!1,hypertension:!1,thyroid:!1,tuberculosis:!1},familyHistory:{diabetes:!1,hypertension:!1,thyroid:!1,tuberculosis:!1,cancer:!1}},i=e.physicalGenerals?JSON.parse(e.physicalGenerals):{appetite:"",bowel:"",urine:"",sweating:"",sleep:"",thirst:"",addictions:""},s=e.menstrualHistory?JSON.parse(e.menstrualHistory):"Female"===e.sex?{menses:"",menopause:"No",leucorrhoea:"",gonorrhea:"No",otherDischarges:""}:null,t=e.foodAndHabit?JSON.parse(e.foodAndHabit):{foodHabit:"",addictions:""};return{id:e.id,name:e.name,guardianName:e.guardianName,address:e.address,age:e.age,sex:e.sex,occupation:e.occupation||"",mobileNumber:e.mobileNumber,chiefComplaints:e.chiefComplaints,createdAt:e.createdAt,updatedAt:e.updatedAt,userId:e.userId,medicalHistory:r,physicalGenerals:i,menstrualHistory:s,foodAndHabit:t,investigations:e.investigations||[],user:e.user}});return r.status(200).json(t);case"POST":console.log("POST /api/patients - Request received"),console.log("Request body:",e.body);try{if(!e.body.mobileNumber)return console.log("Mobile number missing in request"),r.status(400).json({error:"Validation error",message:"Mobile number is required",details:"Mobile number field is missing or empty"});if(!e.body.chiefComplaints)return console.log("Chief complaints missing in request"),r.status(400).json({error:"Validation error",message:"Chief complaints are required",details:"Chief complaints field is missing or empty"});let s=u(e.body);if(!s.valid)return console.log("Patient data validation failed:",s.errors),r.status(400).json({error:"Validation error",message:"Please check the form for errors",details:s.errors.join(", ")});console.log("Patient data validated successfully");let{name:t,guardianName:a,address:n,age:o,sex:l,occupation:d,mobileNumber:m,chiefComplaints:p,stringifiedMedicalHistory:h,stringifiedPhysicalGenerals:g,stringifiedMenstrualHistory:b,stringifiedFoodAndHabit:f}=s.sanitizedData;if(console.log("Creating patient record in database with data:",{name:t,guardianName:a,address:n,age:o,sex:l,occupation:d,mobileNumber:m,chiefComplaints:p,hasMedicalHistory:!!h,hasPhysicalGenerals:!!g,hasMenstrualHistory:!!b,hasFoodAndHabit:!!f}),console.log("Session object:",JSON.stringify(i)),console.log("User object:",JSON.stringify(i.user)),console.log("User ID:",i.user?.id),!i.user||!i.user.id){if(console.error("User session missing or invalid",JSON.stringify(i)),!i||!i.user||!i.user.email)return r.status(400).json({error:"Authentication error",message:"Unable to save patient",details:"User ID is missing or invalid"});{console.log("Attempting to find user by email:",i.user.email);let e=await c.user.findUnique({where:{email:i.user.email}});if(!e)return console.error("Could not find user by email"),r.status(400).json({error:"Authentication error",message:"Unable to save patient",details:"User ID is missing and could not be retrieved"});console.log("Found user by email:",e.id),i.user.id=e.id}}if(!i.user.branchId)return r.status(400).json({error:"Missing branch",message:"You must be assigned to a branch to register patients",details:"User is not associated with any branch"});let y={name:t,guardianName:a,address:n,age:o,sex:l,occupation:d,mobileNumber:m,chiefComplaints:p,medicalHistory:h,physicalGenerals:g,menstrualHistory:b,foodAndHabit:f,userId:i.user.id,branchId:i.user.branchId};console.log("Final patient data for creation:",JSON.stringify(y));let N=await c.patient.create({data:y,include:{investigations:!0}});console.log("Patient created successfully:",N.id);let v={...N,medicalHistory:h?JSON.parse(h):null,physicalGenerals:g?JSON.parse(g):null,menstrualHistory:b?JSON.parse(b):null,foodAndHabit:f?JSON.parse(f):null};return r.status(201).json(v)}catch(e){return console.error("Error creating patient:",e),r.status(400).json({error:"Failed to create patient",message:"Unable to save patient",details:e.message||"Database error occurred",code:e.code})}default:return r.setHeader("Allow",["GET","POST"]),r.status(405).json({error:`Method ${e.method} not allowed`})}}catch(a){console.error("Database error:",a);let i=a.message||"Unknown database error",s=a.meta&&a.meta.cause?a.meta.cause:"No additional details",t=a.code||"UNKNOWN_ERROR";return console.log("Request body:",e.body),console.log("Error details:",{message:i,details:s,code:t,stack:a.stack}),r.status(400).json({error:"Invalid request data",message:i,details:s,code:t})}finally{await c.$disconnect()}}let p=(0,n.l)(s,"default"),h=(0,n.l)(s,"config"),g=new t.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/patients",pathname:"/api/patients",bundlePath:"",filename:""},userland:s})},7309:(e,r,i)=>{i.r(r),i.d(r,{authOptions:()=>c,default:()=>u});let s=require("next-auth");var t=i.n(s);let a=require("next-auth/providers/credentials");var n=i.n(a),o=i(8432),l=i.n(o);let d=new(i(3524)).PrismaClient,c={providers:[n()({name:"credentials",credentials:{email:{label:"Email",type:"email"},password:{label:"Password",type:"password"}},async authorize(e){if(!e?.email||!e?.password)throw Error("Invalid credentials");let r=await d.user.findUnique({where:{email:e.email},include:{clinic:!0,branch:!0}});if(!r||!r.isActive||!await l().compare(e.password,r.hashedPassword))throw Error("Invalid credentials");return{id:r.id,email:r.email,name:r.fullName,role:r.role,clinicId:r.clinicId,branchId:r.branchId,clinicName:r.clinic?.name,branchName:r.branch?.name}}})],session:{strategy:"jwt"},callbacks:{jwt:async({token:e,user:r})=>(r&&(e.role=r.role,e.id=r.id,e.clinicId=r.clinicId,e.branchId=r.branchId,e.clinicName=r.clinicName,e.branchName=r.branchName),e),session:async({session:e,token:r})=>(r&&(e.user.id=r.id,e.user.role=r.role,e.user.clinicId=r.clinicId,e.user.branchId=r.branchId,e.user.clinicName=r.clinicName,e.user.branchName=r.branchName),e)},pages:{signIn:"/login"},secret:process.env.NEXTAUTH_SECRET},u=t()(c)},7153:(e,r)=>{var i;Object.defineProperty(r,"x",{enumerable:!0,get:function(){return i}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(i||(i={}))},1802:(e,r,i)=>{e.exports=i(145)}};var r=require("../../webpack-api-runtime.js");r.C(e);var i=r(r.s=7508);module.exports=i})();