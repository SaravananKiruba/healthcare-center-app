"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/patients";
exports.ids = ["pages/api/patients"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth":
/*!****************************!*\
  !*** external "next-auth" ***!
  \****************************/
/***/ ((module) => {

module.exports = require("next-auth");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\patients\\index.js */ \"(api)/./pages/api/patients/index.js\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/patients\",\n        pathname: \"/api/patients\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_patients_index_js__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnBhdGllbnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNwYXRpZW50cyU1Q2luZGV4LmpzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQzZEO0FBQzdEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx5REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMseURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGVhbHRoY2FyZS1jZW50ZXItbmV4dGpzLz9jYmY5Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlc1xcXFxhcGlcXFxccGF0aWVudHNcXFxcaW5kZXguanNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9wYXRpZW50c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL3BhdGllbnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./pages/api/auth/[...nextauth].js":
/*!*****************************************!*\
  !*** ./pages/api/auth/[...nextauth].js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth */ \"next-auth\");\n/* harmony import */ var next_auth__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_3__.PrismaClient();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (next_auth__WEBPACK_IMPORTED_MODULE_0___default()({\n    providers: [\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_1___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Password\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                const user = await prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    }\n                });\n                if (!user || !user.isActive) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_2___default().compare(credentials.password, user.hashedPassword);\n                if (!isPasswordValid) {\n                    throw new Error(\"Invalid credentials\");\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.fullName,\n                    role: user.role\n                };\n            }\n        })\n    ],\n    session: {\n        strategy: \"jwt\"\n    },\n    callbacks: {\n        async jwt ({ token, user }) {\n            if (user) {\n                token.role = user.role;\n                token.id = user.id;\n            }\n            return token;\n        },\n        async session ({ session, token }) {\n            if (token) {\n                session.user.id = token.id;\n                session.user.role = token.role;\n            }\n            return session;\n        }\n    },\n    pages: {\n        signIn: \"/login\"\n    },\n    secret: \"your-secret-key-change-this-in-production\"\n}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFpQztBQUNpQztBQUNwQztBQUNnQjtBQUU5QyxNQUFNSSxTQUFTLElBQUlELHdEQUFZQTtBQUUvQixpRUFBZUgsZ0RBQVFBLENBQUM7SUFDdEJLLFdBQVc7UUFDVEosc0VBQW1CQSxDQUFDO1lBQ2xCSyxNQUFNO1lBQ05DLGFBQWE7Z0JBQ1hDLE9BQU87b0JBQUVDLE9BQU87b0JBQVNDLE1BQU07Z0JBQVE7Z0JBQ3ZDQyxVQUFVO29CQUFFRixPQUFPO29CQUFZQyxNQUFNO2dCQUFXO1lBQ2xEO1lBQ0EsTUFBTUUsV0FBVUwsV0FBVztnQkFDekIsSUFBSSxDQUFDQSxhQUFhQyxTQUFTLENBQUNELGFBQWFJLFVBQVU7b0JBQ2pELE1BQU0sSUFBSUUsTUFBTTtnQkFDbEI7Z0JBRUEsTUFBTUMsT0FBTyxNQUFNVixPQUFPVSxJQUFJLENBQUNDLFVBQVUsQ0FBQztvQkFDeENDLE9BQU87d0JBQ0xSLE9BQU9ELFlBQVlDLEtBQUs7b0JBQzFCO2dCQUNGO2dCQUVBLElBQUksQ0FBQ00sUUFBUSxDQUFDQSxLQUFLRyxRQUFRLEVBQUU7b0JBQzNCLE1BQU0sSUFBSUosTUFBTTtnQkFDbEI7Z0JBRUEsTUFBTUssa0JBQWtCLE1BQU1oQix1REFBYyxDQUMxQ0ssWUFBWUksUUFBUSxFQUNwQkcsS0FBS00sY0FBYztnQkFHckIsSUFBSSxDQUFDRixpQkFBaUI7b0JBQ3BCLE1BQU0sSUFBSUwsTUFBTTtnQkFDbEI7Z0JBRUEsT0FBTztvQkFDTFEsSUFBSVAsS0FBS08sRUFBRTtvQkFDWGIsT0FBT00sS0FBS04sS0FBSztvQkFDakJGLE1BQU1RLEtBQUtRLFFBQVE7b0JBQ25CQyxNQUFNVCxLQUFLUyxJQUFJO2dCQUNqQjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxTQUFTO1FBQ1BDLFVBQVU7SUFDWjtJQUNBQyxXQUFXO1FBQ1QsTUFBTUMsS0FBSSxFQUFFQyxLQUFLLEVBQUVkLElBQUksRUFBRTtZQUN2QixJQUFJQSxNQUFNO2dCQUNSYyxNQUFNTCxJQUFJLEdBQUdULEtBQUtTLElBQUk7Z0JBQ3RCSyxNQUFNUCxFQUFFLEdBQUdQLEtBQUtPLEVBQUU7WUFDcEI7WUFDQSxPQUFPTztRQUNUO1FBQ0EsTUFBTUosU0FBUSxFQUFFQSxPQUFPLEVBQUVJLEtBQUssRUFBRTtZQUM5QixJQUFJQSxPQUFPO2dCQUNUSixRQUFRVixJQUFJLENBQUNPLEVBQUUsR0FBR08sTUFBTVAsRUFBRTtnQkFDMUJHLFFBQVFWLElBQUksQ0FBQ1MsSUFBSSxHQUFHSyxNQUFNTCxJQUFJO1lBQ2hDO1lBQ0EsT0FBT0M7UUFDVDtJQUNGO0lBQ0FLLE9BQU87UUFDTEMsUUFBUTtJQUNWO0lBQ0FDLFFBQVFDLDJDQUEyQjtBQUNyQyxFQUFFLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZWFsdGhjYXJlLWNlbnRlci1uZXh0anMvLi9wYWdlcy9hcGkvYXV0aC9bLi4ubmV4dGF1dGhdLmpzPzUyN2YiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE5leHRBdXRoIGZyb20gJ25leHQtYXV0aCc7XHJcbmltcG9ydCBDcmVkZW50aWFsc1Byb3ZpZGVyIGZyb20gJ25leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHMnO1xyXG5pbXBvcnQgYmNyeXB0IGZyb20gJ2JjcnlwdGpzJztcclxuaW1wb3J0IHsgUHJpc21hQ2xpZW50IH0gZnJvbSAnQHByaXNtYS9jbGllbnQnO1xyXG5cclxuY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgTmV4dEF1dGgoe1xyXG4gIHByb3ZpZGVyczogW1xyXG4gICAgQ3JlZGVudGlhbHNQcm92aWRlcih7XHJcbiAgICAgIG5hbWU6ICdjcmVkZW50aWFscycsXHJcbiAgICAgIGNyZWRlbnRpYWxzOiB7XHJcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6ICdFbWFpbCcsIHR5cGU6ICdlbWFpbCcgfSxcclxuICAgICAgICBwYXNzd29yZDogeyBsYWJlbDogJ1Bhc3N3b3JkJywgdHlwZTogJ3Bhc3N3b3JkJyB9XHJcbiAgICAgIH0sXHJcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xyXG4gICAgICAgIGlmICghY3JlZGVudGlhbHM/LmVtYWlsIHx8ICFjcmVkZW50aWFscz8ucGFzc3dvcmQpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjcmVkZW50aWFscycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IHByaXNtYS51c2VyLmZpbmRVbmlxdWUoe1xyXG4gICAgICAgICAgd2hlcmU6IHtcclxuICAgICAgICAgICAgZW1haWw6IGNyZWRlbnRpYWxzLmVtYWlsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICghdXNlciB8fCAhdXNlci5pc0FjdGl2ZSkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGNyZWRlbnRpYWxzJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShcclxuICAgICAgICAgIGNyZWRlbnRpYWxzLnBhc3N3b3JkLFxyXG4gICAgICAgICAgdXNlci5oYXNoZWRQYXNzd29yZFxyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmICghaXNQYXNzd29yZFZhbGlkKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY3JlZGVudGlhbHMnKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBpZDogdXNlci5pZCxcclxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxyXG4gICAgICAgICAgbmFtZTogdXNlci5mdWxsTmFtZSxcclxuICAgICAgICAgIHJvbGU6IHVzZXIucm9sZSxcclxuICAgICAgICB9O1xyXG4gICAgICB9XHJcbiAgICB9KVxyXG4gIF0sXHJcbiAgc2Vzc2lvbjoge1xyXG4gICAgc3RyYXRlZ3k6ICdqd3QnLFxyXG4gIH0sXHJcbiAgY2FsbGJhY2tzOiB7XHJcbiAgICBhc3luYyBqd3QoeyB0b2tlbiwgdXNlciB9KSB7XHJcbiAgICAgIGlmICh1c2VyKSB7XHJcbiAgICAgICAgdG9rZW4ucm9sZSA9IHVzZXIucm9sZTtcclxuICAgICAgICB0b2tlbi5pZCA9IHVzZXIuaWQ7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRva2VuO1xyXG4gICAgfSxcclxuICAgIGFzeW5jIHNlc3Npb24oeyBzZXNzaW9uLCB0b2tlbiB9KSB7XHJcbiAgICAgIGlmICh0b2tlbikge1xyXG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHRva2VuLmlkO1xyXG4gICAgICAgIHNlc3Npb24udXNlci5yb2xlID0gdG9rZW4ucm9sZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gc2Vzc2lvbjtcclxuICAgIH0sXHJcbiAgfSxcclxuICBwYWdlczoge1xyXG4gICAgc2lnbkluOiAnL2xvZ2luJyxcclxuICB9LFxyXG4gIHNlY3JldDogcHJvY2Vzcy5lbnYuTkVYVEFVVEhfU0VDUkVULFxyXG59KTtcclxuIl0sIm5hbWVzIjpbIk5leHRBdXRoIiwiQ3JlZGVudGlhbHNQcm92aWRlciIsImJjcnlwdCIsIlByaXNtYUNsaWVudCIsInByaXNtYSIsInByb3ZpZGVycyIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJFcnJvciIsInVzZXIiLCJmaW5kVW5pcXVlIiwid2hlcmUiLCJpc0FjdGl2ZSIsImlzUGFzc3dvcmRWYWxpZCIsImNvbXBhcmUiLCJoYXNoZWRQYXNzd29yZCIsImlkIiwiZnVsbE5hbWUiLCJyb2xlIiwic2Vzc2lvbiIsInN0cmF0ZWd5IiwiY2FsbGJhY2tzIiwiand0IiwidG9rZW4iLCJwYWdlcyIsInNpZ25JbiIsInNlY3JldCIsInByb2Nlc3MiLCJlbnYiLCJORVhUQVVUSF9TRUNSRVQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./pages/api/auth/[...nextauth].js\n");

/***/ }),

/***/ "(api)/./pages/api/patients/index.js":
/*!*************************************!*\
  !*** ./pages/api/patients/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _auth_nextauth___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../auth/[...nextauth] */ \"(api)/./pages/api/auth/[...nextauth].js\");\n\n\n\nconst prisma = new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\n// Helper function to validate and sanitize patient data\nconst validateAndSanitizePatientData = (data)=>{\n    console.log(\"Validating patient data:\", data);\n    const { name, guardianName, address, age, sex, occupation, mobileNumber, chiefComplaints, medicalHistory, physicalGenerals, menstrualHistory, foodAndHabit, userId// Extract userId if present\n     } = data;\n    // Required fields validation with detailed error messages\n    const errors = [];\n    if (!name || typeof name !== \"string\" || !name.trim()) errors.push(\"Name is required\");\n    if (!address || typeof address !== \"string\" || !address.trim()) errors.push(\"Address is required\");\n    if (age === undefined || age === null || age === \"\" || isNaN(parseInt(age))) errors.push(\"Age is required and must be a number\");\n    if (!sex || sex !== \"Male\" && sex !== \"Female\" && sex !== \"Other\") errors.push(\"Sex is required (Male, Female, or Other)\");\n    // Additional validation for the commonly failing fields\n    if (!mobileNumber) {\n        errors.push(\"Mobile number is required\");\n        console.error(\"Mobile number validation failed: empty value\");\n    } else if (typeof mobileNumber !== \"string\") {\n        errors.push(\"Mobile number must be a string\");\n        console.error(\"Mobile number validation failed: not a string\", typeof mobileNumber);\n    } else if (!mobileNumber.trim()) {\n        errors.push(\"Mobile number cannot be empty\");\n        console.error(\"Mobile number validation failed: empty string\");\n    }\n    if (!chiefComplaints) {\n        errors.push(\"Chief complaints are required\");\n        console.error(\"Chief complaints validation failed: empty value\");\n    } else if (typeof chiefComplaints !== \"string\") {\n        errors.push(\"Chief complaints must be a string\");\n        console.error(\"Chief complaints validation failed: not a string\", typeof chiefComplaints);\n    } else if (!chiefComplaints.trim()) {\n        errors.push(\"Chief complaints cannot be empty\");\n        console.error(\"Chief complaints validation failed: empty string\");\n    }\n    // Additional validations\n    if (typeof age === \"number\" && (age <= 0 || age > 150)) {\n        errors.push(\"Age must be between 1 and 150\");\n    }\n    if (mobileNumber && !/^[0-9-+()\\\\s]+$/.test(mobileNumber)) {\n        errors.push(\"Mobile number contains invalid characters\");\n    }\n    if (errors.length > 0) {\n        console.log(\"Validation errors:\", errors);\n        return {\n            valid: false,\n            errors\n        };\n    }\n    // Create default values for optional JSON fields\n    const defaultMedicalHistory = {\n        pastHistory: {\n            allergy: false,\n            anemia: false,\n            arthritis: false,\n            asthma: false,\n            cancer: false,\n            diabetes: false,\n            heartDisease: false,\n            hypertension: false,\n            thyroid: false,\n            tuberculosis: false\n        },\n        familyHistory: {\n            diabetes: false,\n            hypertension: false,\n            thyroid: false,\n            tuberculosis: false,\n            cancer: false\n        }\n    };\n    const defaultPhysicalGenerals = {\n        appetite: \"\",\n        bowel: \"\",\n        urine: \"\",\n        sweating: \"\",\n        sleep: \"\",\n        thirst: \"\",\n        addictions: \"\"\n    };\n    const defaultFoodAndHabit = {\n        foodHabit: \"\",\n        addictions: \"\"\n    };\n    const defaultMenstrualHistory = sex === \"Female\" ? {\n        menses: \"\",\n        menopause: \"No\",\n        leucorrhoea: \"\",\n        gonorrhea: \"No\",\n        otherDischarges: \"\"\n    } : null;\n    // Safe parsing of JSON fields\n    let sanitizedMedicalHistory;\n    let sanitizedPhysicalGenerals;\n    let sanitizedMenstrualHistory;\n    let sanitizedFoodAndHabit;\n    try {\n        sanitizedMedicalHistory = medicalHistory ? typeof medicalHistory === \"string\" ? JSON.parse(medicalHistory) : medicalHistory : defaultMedicalHistory;\n    } catch (e) {\n        console.log(\"Error parsing medicalHistory:\", e);\n        sanitizedMedicalHistory = defaultMedicalHistory;\n    }\n    try {\n        sanitizedPhysicalGenerals = physicalGenerals ? typeof physicalGenerals === \"string\" ? JSON.parse(physicalGenerals) : physicalGenerals : defaultPhysicalGenerals;\n    } catch (e) {\n        console.log(\"Error parsing physicalGenerals:\", e);\n        sanitizedPhysicalGenerals = defaultPhysicalGenerals;\n    }\n    try {\n        sanitizedMenstrualHistory = sex === \"Female\" && menstrualHistory ? typeof menstrualHistory === \"string\" ? JSON.parse(menstrualHistory) : menstrualHistory : defaultMenstrualHistory;\n    } catch (e) {\n        console.log(\"Error parsing menstrualHistory:\", e);\n        sanitizedMenstrualHistory = defaultMenstrualHistory;\n    }\n    try {\n        sanitizedFoodAndHabit = foodAndHabit ? typeof foodAndHabit === \"string\" ? JSON.parse(foodAndHabit) : foodAndHabit : defaultFoodAndHabit;\n    } catch (e) {\n        console.log(\"Error parsing foodAndHabit:\", e);\n        sanitizedFoodAndHabit = defaultFoodAndHabit;\n    }\n    console.log(\"Data sanitization complete\");\n    // Prepare the sanitized data\n    const sanitizedData = {\n        name: name.trim(),\n        guardianName: guardianName ? guardianName.trim() : null,\n        address: address.trim(),\n        age: parseInt(age),\n        sex,\n        occupation: occupation ? occupation.trim() : null,\n        mobileNumber: mobileNumber.trim(),\n        chiefComplaints: chiefComplaints.trim(),\n        stringifiedMedicalHistory: JSON.stringify(sanitizedMedicalHistory),\n        stringifiedPhysicalGenerals: JSON.stringify(sanitizedPhysicalGenerals),\n        stringifiedMenstrualHistory: sex === \"Female\" ? JSON.stringify(sanitizedMenstrualHistory) : null,\n        stringifiedFoodAndHabit: JSON.stringify(sanitizedFoodAndHabit)\n    };\n    // If userId is provided, include it in the sanitized data\n    if (userId) {\n        console.log(\"User ID provided in data:\", userId);\n        sanitizedData.userId = userId;\n    }\n    return {\n        valid: true,\n        sanitizedData\n    };\n};\nasync function handler(req, res) {\n    console.log(`API Request: ${req.method} ${req.url}`);\n    console.log(\"Headers:\", JSON.stringify(req.headers));\n    // Log request body for POST and PUT requests\n    if ([\n        \"POST\",\n        \"PUT\"\n    ].includes(req.method)) {\n        console.log(\"Request body:\", JSON.stringify(req.body));\n    }\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_1__.getServerSession)(req, res, _auth_nextauth___WEBPACK_IMPORTED_MODULE_2__.authOptions);\n    console.log(\"Session from getServerSession:\", JSON.stringify(session));\n    if (!session) {\n        return res.status(401).json({\n            error: \"Unauthorized\"\n        });\n    }\n    try {\n        switch(req.method){\n            case \"GET\":\n                const patients = await prisma.patient.findMany({\n                    where: {\n                        userId: session.user.id\n                    },\n                    include: {\n                        investigations: true,\n                        user: {\n                            select: {\n                                id: true,\n                                email: true,\n                                fullName: true,\n                                role: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: \"desc\"\n                    }\n                });\n                // Transform data to match frontend expectations\n                const transformedPatients = patients.map((patient)=>{\n                    // Parse JSON fields stored as strings\n                    const medicalHistory = patient.medicalHistory ? JSON.parse(patient.medicalHistory) : {\n                        pastHistory: {\n                            allergy: false,\n                            anemia: false,\n                            arthritis: false,\n                            asthma: false,\n                            cancer: false,\n                            diabetes: false,\n                            heartDisease: false,\n                            hypertension: false,\n                            thyroid: false,\n                            tuberculosis: false\n                        },\n                        familyHistory: {\n                            diabetes: false,\n                            hypertension: false,\n                            thyroid: false,\n                            tuberculosis: false,\n                            cancer: false\n                        }\n                    };\n                    const physicalGenerals = patient.physicalGenerals ? JSON.parse(patient.physicalGenerals) : {\n                        appetite: \"\",\n                        bowel: \"\",\n                        urine: \"\",\n                        sweating: \"\",\n                        sleep: \"\",\n                        thirst: \"\",\n                        addictions: \"\"\n                    };\n                    const menstrualHistory = patient.menstrualHistory ? JSON.parse(patient.menstrualHistory) : patient.sex === \"Female\" ? {\n                        menses: \"\",\n                        menopause: \"No\",\n                        leucorrhoea: \"\",\n                        gonorrhea: \"No\",\n                        otherDischarges: \"\"\n                    } : null;\n                    const foodAndHabit = patient.foodAndHabit ? JSON.parse(patient.foodAndHabit) : {\n                        foodHabit: \"\",\n                        addictions: \"\"\n                    };\n                    return {\n                        id: patient.id,\n                        name: patient.name,\n                        guardianName: patient.guardianName,\n                        address: patient.address,\n                        age: patient.age,\n                        sex: patient.sex,\n                        occupation: patient.occupation || \"\",\n                        mobileNumber: patient.mobileNumber,\n                        chiefComplaints: patient.chiefComplaints,\n                        createdAt: patient.createdAt,\n                        updatedAt: patient.updatedAt,\n                        userId: patient.userId,\n                        medicalHistory,\n                        physicalGenerals,\n                        menstrualHistory,\n                        foodAndHabit,\n                        investigations: patient.investigations || [],\n                        user: patient.user\n                    };\n                });\n                return res.status(200).json(transformedPatients);\n            case \"POST\":\n                console.log(\"POST /api/patients - Request received\");\n                console.log(\"Request body:\", req.body);\n                try {\n                    // Check for empty required fields before validation\n                    if (!req.body.mobileNumber) {\n                        console.log(\"Mobile number missing in request\");\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Mobile number is required\",\n                            details: \"Mobile number field is missing or empty\"\n                        });\n                    }\n                    if (!req.body.chiefComplaints) {\n                        console.log(\"Chief complaints missing in request\");\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Chief complaints are required\",\n                            details: \"Chief complaints field is missing or empty\"\n                        });\n                    }\n                    // Validate and sanitize patient data\n                    const validationResult = validateAndSanitizePatientData(req.body);\n                    // If validation fails, return error\n                    if (!validationResult.valid) {\n                        console.log(\"Patient data validation failed:\", validationResult.errors);\n                        return res.status(400).json({\n                            error: \"Validation error\",\n                            message: \"Please check the form for errors\",\n                            details: validationResult.errors.join(\", \")\n                        });\n                    }\n                    console.log(\"Patient data validated successfully\");\n                    const { name, guardianName, address, age, sex, occupation, mobileNumber, chiefComplaints, stringifiedMedicalHistory, stringifiedPhysicalGenerals, stringifiedMenstrualHistory, stringifiedFoodAndHabit } = validationResult.sanitizedData;\n                    // Create the patient record\n                    console.log(\"Creating patient record in database with data:\", {\n                        name,\n                        guardianName,\n                        address,\n                        age,\n                        sex,\n                        occupation,\n                        mobileNumber,\n                        chiefComplaints,\n                        hasMedicalHistory: !!stringifiedMedicalHistory,\n                        hasPhysicalGenerals: !!stringifiedPhysicalGenerals,\n                        hasMenstrualHistory: !!stringifiedMenstrualHistory,\n                        hasFoodAndHabit: !!stringifiedFoodAndHabit\n                    });\n                    // Debug session information\n                    console.log(\"Session object:\", JSON.stringify(session));\n                    console.log(\"User object:\", JSON.stringify(session.user));\n                    console.log(\"User ID:\", session.user?.id);\n                    // Check if userId is available\n                    if (!session.user || !session.user.id) {\n                        console.error(\"User session missing or invalid\", JSON.stringify(session));\n                        // If user ID is missing but we have a session, try to use it anyway\n                        if (session && session.user && session.user.email) {\n                            console.log(\"Attempting to find user by email:\", session.user.email);\n                            // Try to find the user by email\n                            const user = await prisma.user.findUnique({\n                                where: {\n                                    email: session.user.email\n                                }\n                            });\n                            if (user) {\n                                console.log(\"Found user by email:\", user.id);\n                                session.user.id = user.id; // Set the ID\n                            } else {\n                                console.error(\"Could not find user by email\");\n                                return res.status(400).json({\n                                    error: \"Authentication error\",\n                                    message: \"Unable to save patient\",\n                                    details: \"User ID is missing and could not be retrieved\"\n                                });\n                            }\n                        } else {\n                            return res.status(400).json({\n                                error: \"Authentication error\",\n                                message: \"Unable to save patient\",\n                                details: \"User ID is missing or invalid\"\n                            });\n                        }\n                    }\n                    // Prepare data for patient creation\n                    const patientData = {\n                        name,\n                        guardianName,\n                        address,\n                        age,\n                        sex,\n                        occupation,\n                        mobileNumber,\n                        chiefComplaints,\n                        medicalHistory: stringifiedMedicalHistory,\n                        physicalGenerals: stringifiedPhysicalGenerals,\n                        menstrualHistory: stringifiedMenstrualHistory,\n                        foodAndHabit: stringifiedFoodAndHabit,\n                        // Use the userId field directly\n                        userId: session.user.id\n                    };\n                    console.log(\"Final patient data for creation:\", JSON.stringify(patientData));\n                    const newPatient = await prisma.patient.create({\n                        data: patientData,\n                        include: {\n                            investigations: true\n                        }\n                    });\n                    console.log(\"Patient created successfully:\", newPatient.id);\n                    // Parse the JSON fields back for the response\n                    const transformedNewPatient = {\n                        ...newPatient,\n                        medicalHistory: stringifiedMedicalHistory ? JSON.parse(stringifiedMedicalHistory) : null,\n                        physicalGenerals: stringifiedPhysicalGenerals ? JSON.parse(stringifiedPhysicalGenerals) : null,\n                        menstrualHistory: stringifiedMenstrualHistory ? JSON.parse(stringifiedMenstrualHistory) : null,\n                        foodAndHabit: stringifiedFoodAndHabit ? JSON.parse(stringifiedFoodAndHabit) : null\n                    };\n                    return res.status(201).json(transformedNewPatient);\n                } catch (error) {\n                    console.error(\"Error creating patient:\", error);\n                    // Enhanced error response with more details\n                    return res.status(400).json({\n                        error: \"Failed to create patient\",\n                        message: \"Unable to save patient\",\n                        details: error.message || \"Database error occurred\",\n                        code: error.code\n                    });\n                }\n            default:\n                res.setHeader(\"Allow\", [\n                    \"GET\",\n                    \"POST\"\n                ]);\n                return res.status(405).json({\n                    error: `Method ${req.method} not allowed`\n                });\n        }\n    } catch (error) {\n        console.error(\"Database error:\", error);\n        // Enhanced error logging\n        const errorMessage = error.message || \"Unknown database error\";\n        const errorDetails = error.meta && error.meta.cause ? error.meta.cause : \"No additional details\";\n        const errorCode = error.code || \"UNKNOWN_ERROR\";\n        console.log(\"Request body:\", req.body);\n        console.log(\"Error details:\", {\n            message: errorMessage,\n            details: errorDetails,\n            code: errorCode,\n            stack: error.stack\n        });\n        return res.status(400).json({\n            error: \"Invalid request data\",\n            message: errorMessage,\n            details: errorDetails,\n            code: errorCode\n        });\n    } finally{\n        await prisma.$disconnect();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/patients/index.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fpatients&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cpatients%5Cindex.js&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();